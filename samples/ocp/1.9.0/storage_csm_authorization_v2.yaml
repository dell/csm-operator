apiVersion: storage.dell.com/v1
kind: ContainerStorageModule
metadata:
  name: authorization
  namespace: authorization
spec:
  modules:
    # Authorization: enable csm-authorization proxy server for RBAC
    - name: authorization-proxy-server
      # enable: Enable/Disable csm-authorization
      enabled: true
      configVersion: v2.2.0
      forceRemoveModule: true
      components:
        # For Kubernetes Container Platform only
        # enabled: Enable/Disable NGINX Ingress Controller
        # Allowed values:
        #   true: enable deployment of NGINX Ingress Controller
        #   false: disable deployment of NGINX Ingress Controller only if you have your own ingress controller. Set the appropriate annotations for the ingresses in the proxy-server section
        # Default value: true
        - name: nginx
          enabled: true
        # enabled: Enable/Disable cert-manager
        # Allowed values:
        #   true: enable deployment of cert-manager
        #   false: disable deployment of cert-manager only if it's already deployed
        # Default value: true
        - name: cert-manager
          enabled: true
        - name: proxy-server
          # enable: Enable/Disable csm-authorization proxy server
          enabled: true
          proxyService: registry.connect.redhat.com/dell-emc/dell-csm-authorization-proxy@sha256:1a3e53c1758850d26881923ee744b3cfff120daaaff33565c438fcc39d65f2ab
          proxyServiceReplicas: 1
          tenantService: registry.connect.redhat.com/dell-emc/dell-csm-authorization-tenant@sha256:030f1b20442b5df62ee8cce281d40226781478d351ea8fa67477cbb318fcc401
          tenantServiceReplicas: 1
          roleService: registry.connect.redhat.com/dell-emc/dell-csm-authorization-role@sha256:c874c7c23b55e88e98615172678e63ceb0e534ab11cdaf8949eef16881af64b7
          roleServiceReplicas: 1
          storageService: registry.connect.redhat.com/dell-emc/dell-csm-authorization-storage@sha256:bdc27c5bacbdaa601272055e8a8a6a482ae20192df50cce004d9b4a0fd131289
          storageServiceReplicas: 1
          opa: docker.io/openpolicyagent/opa@sha256:2b1c4b231f6dfa6a2baea4af4109203b10cd4b65e836d72f03bfe5d8dfce7095
          opaKubeMgmt: docker.io/openpolicyagent/kube-mgmt@sha256:3a5923a3623ffbf3d8a7d725af4178207b14225fb546a1fd1af0de53b6e47f2c
          authorizationController: registry.connect.redhat.com/dell-emc/dell-csm-authorization-controller@sha256:45af064da686118a8e5c2711dc00f1969c581bb169c26f5fb7f6f6a6186142fa
          authorizationControllerReplicas: 1
          leaderElection: true
          # controllerReconcileInterval: interval for the authorization controllers to reconcile with Redis.
          controllerReconcileInterval: 5m
          # certificate: base64-encoded certificate for cert/private-key pair -- add certificate here to use custom certificates
          # for self-signed certs, leave empty string
          # Allowed values: string
          certificate: ""
          # privateKey: base64-encoded private key for cert/private-key pair -- add private key here to use custom certificates
          # for self-signed certs, leave empty string
          # Allowed values: string
          privateKey: ""
          # proxy-server ingress will use this hostname
          # NOTE: an additional hostname can be configured in proxyServerIngress.hosts
          # NOTE: proxy-server ingress is configured to accept IP address connections so hostnames are not required
          hostname: "csm-authorization.com"
          # proxy-server ingress configuration
          proxyServerIngress:
            - ingressClassName: nginx
              # additional host rules for the proxy-server ingress
              hosts: []
              # - [application name]-ingress-nginx-controller.[namespace].svc.cluster.local

              # additional annotations for the proxy-server ingress
              annotations: {}
          # openTelemetryCollectorAddress: the OTLP receiving endpoint using gRPC
          openTelemetryCollectorAddress: ""
        - name: redis
          redis: docker.io/redis:7.4.1-alpine
          commander: docker.io/rediscommander/redis-commander:latest
          redisName: redis-csm
          redisCommander: rediscommander
          sentinel: sentinel
          redisReplicas: 5
        - name: vault
          vaultConfigurations:
            - identifier: vault0
              address: https://10.0.0.1:8400
              role: csm-authorization
              skipCertificateValidation: true
              # clientCertificate: base64-encoded certificate for cert/private-key pair -- add certificate here to use custom certificates
              # for self-signed certs, leave empty string
              # Allowed values: string
              clientCertificate: ""
              # clientKey: base64-encoded private key for cert/private-key pair -- add private key here to use custom certificates
              # for self-signed certs, leave empty string
              # Allowed values: string
              clientKey: ""
              # certificateAuthority: base64-encoded certificate authority for validating vault server certificate -- add certificate authority here to use custom certificates
              #  for self-signed certs, leave empty string
              # Allowed values: string
              certificateAuthority: ""
#            - identifier: vault0
#              address: https://10.0.0.1:8400
#              role: csm-authorization
#              skipCertificateValidation: true
#              clientCertificate:
#              clientKey:
#              certificateAuthority:
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: csm-config-params
  namespace: authorization
data:
  csm-config-params.yaml: |-
    CONCURRENT_POWERFLEX_REQUESTS: 10
    CONCURRENT_POWERSCALE_REQUESTS: 10
    LOG_LEVEL: debug
    STORAGE_CAPACITY_POLL_INTERVAL: 30m
