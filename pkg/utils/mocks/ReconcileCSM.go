// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// ReconcileCSM is an autogenerated mock type for the ReconcileCSM type
type ReconcileCSM struct {
	mock.Mock
}

// GetClient provides a mock function with given fields:
func (_m *ReconcileCSM) GetClient() client.Client {
	ret := _m.Called()

	var r0 client.Client
	if rf, ok := ret.Get(0).(func() client.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	return r0
}

// GetUpdateCount provides a mock function with given fields:
func (_m *ReconcileCSM) GetUpdateCount() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// IncrUpdateCount provides a mock function with given fields:
func (_m *ReconcileCSM) IncrUpdateCount() {
	_m.Called()
}

// Reconcile provides a mock function with given fields: _a0, _a1
func (_m *ReconcileCSM) Reconcile(_a0 context.Context, _a1 reconcile.Request) (reconcile.Result, error) {
	ret := _m.Called(_a0, _a1)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
