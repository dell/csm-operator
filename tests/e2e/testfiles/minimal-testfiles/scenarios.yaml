# List of E2E Tests Scenarios for minimal samples

- scenario: "Install PowerStore Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore.yaml"
  tags:
    - "powerstore"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Create Secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [powerstore] driver spec from CR [1]"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"

- scenario: "Install PowerStore Driver with Shared NFS (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore.yaml"
  tags:
    - "sharednfs"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Run [Is NFS Server Running]"
    - "Create StorageClass with template [testfiles/powerstore-templates/storage-class-sharednfs.yaml] for [pstore]"
    - "Create Secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [powerstore] driver spec from CR [1]"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
  customTest:
    - name: Is NFS Server Running
      run:
        - /bin/bash scripts/verify_nfs.sh

- scenario: "Install PowerStore Driver (Minimal, With Resiliency)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore_resiliency.yaml"
  tags:
    - "powerstore"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Create Secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"

- scenario: "Install PowerStore Driver (Minimal, Standalone), Enable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore.yaml"
  tags:
    - "powerstore"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Create Secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"

- scenario: "Install PowerStore Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore_with_no_forceRemoveDriver.yaml"
  tags:
    - "powerstore"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Create Secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powerstore] driver from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"

- scenario: "Install PowerStore Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore_with_false_forceRemoveDriver.yaml"
  tags:
    - "powerstore"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Create Secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"

- scenario: "Install Unity Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_unity.yaml"
  tags:
    - "unity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
    - "Create Secret with template [testfiles/unity-templates/unity-secret-template.yaml] name [unity-creds] in namespace [unity] for [unity]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [unity] driver from CR [1] is installed"
    - "Validate [unity] driver spec from CR [1]"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is not installed"

- scenario: "Install Unity Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_unity_with_false_forceRemoveDriver.yaml"
  tags:
    - "unity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
    - "Create Secret with template [testfiles/unity-templates/unity-secret-template.yaml] name [unity-creds] in namespace [unity] for [unity]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [unity] driver from CR [1] is installed"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is not installed"

- scenario: "Install Unity Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_unity_with_no_forceRemoveDriver.yaml"
  tags:
    - "unity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
    - "Create Secret with template [testfiles/unity-templates/unity-secret-template.yaml] name [unity-creds] in namespace [unity] for [unity]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [unity] driver from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is not installed"

- scenario: "Install PowerFlex Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [powerflex] driver spec from CR [1]"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerFlex Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_with_no_forceRemoveDriver.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powerflex] driver from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerFlex Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_with_false_forceRemoveDriver.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerFlex Driver (Minimal, With Resiliency)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_resiliency.yaml"
  tags:
    - "powerflex"
    - "resiliency"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerFlex Driver (Minimal, Standalone), Enable/Disable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerFlex Driver (Minimal, With Authorization V2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerflex_auth.yaml"
    - "../../operatorconfig/moduleconfig/authorization/v2.3.0/authorization-crds.yaml"
  tags:
    - "authorization"
    - "authorizationproxyserver"
    # - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Create resource with template [testfiles/authorization-templates/storage_csm_authorization_secret_provider_class.yaml] for [pflexAuthCRs]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerflex]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"

- scenario: "Install PowerFlex Driver (Minimal, With Observability)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_observability.yaml"
  tags:
    - "observability"
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerFlex Driver (Minimal, With Observability and Custom Cert for Otel-Collector)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_observability_otel_custom_cert.yaml"
  tags:
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create StorageClass with template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [powerscale] driver spec from CR [1]"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_with_no_forceRemoveDriver.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create StorageClass with template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powerscale] driver from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_with_false_forceRemoveDriver.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create StorageClass with template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, Standalone), Enable/Disable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "resiliency"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, With Resiliency)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_resiliency.yaml"
  tags:
    - "powerscale"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, With Replication)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_replica.yaml"
  tags:
    - "powerscale"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create StorageClass with template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, Standalone), Enable/Disable Replication"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerscale_replica.yaml"
  tags:
    - "powerscale"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create StorageClass with template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is not installed"
    - "Enable [replication] module from CR [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [replication] module from CR [2] is installed"
    - "Disable [replication] module from CR [1]"
    - "Validate [replication] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"

- scenario: "Uninstall PowerScale Driver (Minimal)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, Standalone), Enable/Disable Observability"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Disable [observability] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, With Observability and Custom Certs)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_observability_top_custom_cert.yaml"
  tags:
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"

- scenario: "Install PowerScale Driver (Minimal, With Authorization V2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerscale_auth2.0.yaml"
    - "../../operatorconfig/moduleconfig/authorization/v2.3.0/authorization-crds.yaml"
  tags:
    - "authorization"
    - "authorizationproxyserver"
    - "powerscale"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Create resource with template [testfiles/authorization-templates/storage_csm_authorization_secret_provider_class.yaml] for [pscaleAuthCRs]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create Secret with template [testfiles/minimal-testfiles/empty-secret.yaml] name [isilon-certs-0] in namespace [isilon] for [pscale]"
    - "Create StorageClass with template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Create Secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscaleAuth]"
    - "Create Secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerscale]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"

- scenario: "Install Powerflex Driver (Minimal, With Replication)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_replica.yaml"
  tags:
    - "powerflex"
    - "replication"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Create Secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [powermax] driver spec from CR [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver without powermax-array-config.yaml (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax.yaml] for [pmaxArrayConfig]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [powermax] driver spec from CR [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver with Mount Credentials (Minimal)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_secret.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create Secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-creds] in namespace [powermax] for [pmaxUseSecret]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [powermax] driver spec from CR [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver without powermax-array-config.yaml with Mount Credentials (Minimal)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_secret.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create Secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-creds] in namespace [powermax] for [pmaxUseSecret]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax_secret.yaml] for [pmaxArrayConfig]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [powermax] driver spec from CR [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver with Mount Credentials (Minimal), Enable Observability"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_secret.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create Secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-creds] in namespace [powermax] for [pmaxUseSecret]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Validate [powermax] driver spec from CR [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver without powermax-array-config with Mount Credentials (Minimal), Enable Observability"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_secret.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create Secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-creds] in namespace [powermax] for [pmaxUseSecret]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax_secret.yaml] for [pmaxArrayConfig]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Validate [powermax] driver spec from CR [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_with_no_forceRemoveDriver.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver without powermax-array-config.yaml (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_with_no_forceRemoveDriver.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax_with_no_forceRemoveDriver.yaml] for [pmaxArrayConfig]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_with_false_forceRemoveDriver.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver without powermax-array-config (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_with_false_forceRemoveDriver.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax_with_false_forceRemoveDriver.yaml] for [pmaxArrayConfig]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver (Minimal, With Observability)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_observability.yaml"
  tags:
    - "powermax"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install PowerMax Driver without powermax-array-config.yaml (Minimal, With Observability)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_observability.yaml"
  tags:
    - "powermax"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax_observability.yaml] for [pmaxArrayConfig]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install Powermax Driver (Minimal, With Authorization v2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "../../operatorconfig/moduleconfig/authorization/v2.3.0/authorization-crds.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powermax_reverseproxy_authorization_v2.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Create resource with template [testfiles/authorization-templates/storage_csm_authorization_secret_provider_class.yaml] for [pmaxAuthCRs]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create Secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"

- scenario: "Install Powermax Driver without powermax-array-config.yaml (Minimal, With Authorization v2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "../../operatorconfig/moduleconfig/authorization/v2.3.0/authorization-crds.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powermax_reverseproxy_authorization_v2.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Create resource with template [testfiles/authorization-templates/storage_csm_authorization_secret_provider_class.yaml] for [pmaxAuthCRs]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create Secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax_reverseproxy_authorization_v2.yaml] for [pmaxArrayConfig]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"

- scenario: "Install Powermax Driver (Minimal, Standalone), Enable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install Powermax Driver without powermax-array-config.yaml (Minimal, Standalone), Enable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax.yaml] for [pmaxArrayConfig]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install Powermax Driver (Minimal, With Resiliency), Disable Resiliency module"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_resiliency.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install Powermax Driver without powermax-array-config.yaml (Minimal, With Resiliency), Disable Resiliency module"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_resiliency.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax_resiliency.yaml] for [pmaxArrayConfig]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install Powermax Driver (Minimal, With Replication)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_replica.yaml"
  tags:
    - "powermax"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"

- scenario: "Install Powermax Driver without powermax-array-config.yaml (Minimal, With Replication)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_replica.yaml"
  tags:
    - "powermax"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create StorageClass with template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Create resource with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Create ConfigMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Create resource with template [testfiles/minimal-testfiles/storage_csm_powermax_replica.yaml] for [pmaxArrayConfig]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
