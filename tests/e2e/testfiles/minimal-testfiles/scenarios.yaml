# List of E2E Tests Scenarios for minimal samples

- scenario: "Install PowerStore Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore.yaml"
  tags:
    - "powerstore"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pstore] and template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [powerstore] driver spec from CR [1]"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pstore --chainNumber 2 --chainLength 2

- scenario: "Install PowerStore Driver (Minimal, With Resiliency)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore_resiliency.yaml"
  tags:
    - "powerstore"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pstore] and template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
  customTest:
    - name: CustomTest
      run:
        - echo "no current test for resiliency"

- scenario: "Install PowerStore Driver (Minimal, Standalone), Enable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore.yaml"
  tags:
    - "powerstore"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pstore] and template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"

- scenario: "Install PowerStore Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore_with_no_forceRemoveDriver.yaml"
  tags:
    - "powerstore"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pstore] and template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pstore --chainNumber 2 --chainLength 2

- scenario: "Install PowerStore Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerstore_with_false_forceRemoveDriver.yaml"
  tags:
    - "powerstore"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pstore] and template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Run custom test"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pstore --chainNumber 2 --chainLength 2

- scenario: "Install Unity Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_unity.yaml"
  tags:
    - "unity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-unity] and template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
    - "Set up secret with template [testfiles/unity-templates/unity-secret-template.yaml] name [unity-creds] in namespace [unity] for [unity]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [unity] driver from CR [1] is installed"
    - "Validate [unity] driver spec from CR [1]"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is not installed"
    - "Restore template [testfiles/unity-templates/unity-secret-template.yaml] for [unity]"
    - "Restore template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-unity --chainNumber 2 --chainLength 2

- scenario: "Install Unity Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_unity_with_false_forceRemoveDriver.yaml"
  tags:
    - "unity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-unity] and template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
    - "Set up secret with template [testfiles/unity-templates/unity-secret-template.yaml] name [unity-creds] in namespace [unity] for [unity]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [unity] driver from CR [1] is installed"
    - "Run custom test"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is not installed"
    - "Restore template [testfiles/unity-templates/unity-secret-template.yaml] for [unity]"
    - "Restore template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-unity --chainNumber 2 --chainLength 2

- scenario: "Install Unity Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_unity_with_no_forceRemoveDriver.yaml"
  tags:
    - "unity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-unity] and template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
    - "Set up secret with template [testfiles/unity-templates/unity-secret-template.yaml] name [unity-creds] in namespace [unity] for [unity]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [unity] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is not installed"
    - "Restore template [testfiles/unity-templates/unity-secret-template.yaml] for [unity]"
    - "Restore template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-unity --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [powerflex] driver spec from CR [1]"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_with_no_forceRemoveDriver.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_with_false_forceRemoveDriver.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver (Minimal, With Resiliency)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_resiliency.yaml"
  tags:
    - "powerflex"
    - "resiliency"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
  customTest:
    - name: CustomTest
      run:
        - echo "no current test for resiliency"

- scenario: "Install PowerFlex Driver (Minimal, Standalone), Enable/Disable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"

- scenario: "Install PowerFlex Driver (Minimal, With Authorization V2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerflex_auth.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorization"
    - "authorizationproxyserver"
    # - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerflex]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"
    - "Restore template [testfiles/powerflex-templates/csm-authorization-config.json] for [pflexAuthSidecar]"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflexAuth]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver (Minimal, With Authorization V1)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_no_cert.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerflex_auth_v1.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    # - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflexAuth]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/csm-authorization-config.json] for [pflexAuthSidecar]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver (Minimal, With Observability)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_observability.yaml"
  tags:
    - "observability"
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver (Minimal, With Observability and Custom Cert for Otel-Collector)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_observability_otel_custom_cert.yaml"
  tags:
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"

- scenario: "Install PowerScale Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [powerscale] driver spec from CR [1]"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_with_no_forceRemoveDriver.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_with_false_forceRemoveDriver.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Run custom test"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver (Minimal, Standalone), Enable/Disable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "resiliency"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"

- scenario: "Install PowerScale Driver (Minimal, With Resiliency)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_resiliency.yaml"
  tags:
    - "powerscale"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
  customTest:
    - name: CustomTest
      run:
        - echo "no current test for resiliency"

- scenario: "Install PowerScale Driver (Minimal, With Replication)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_replica.yaml"
  tags:
    - "powerscale"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
  customTest:
    - name: HelloWorld
      run:
        - echo "no current test implemented for replication"

- scenario: "Install PowerScale Driver (Minimal, Standalone), Enable/Disable Replication"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerscale_replica.yaml"
  tags:
    - "powerscale"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is not installed"
    - "Enable [replication] module from CR [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [replication] module from CR [2] is installed"
    - "Run custom test"
    - "Disable [replication] module from CR [1]"
    - "Validate [replication] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
  customTest:
    - name: HelloWorld
      run:
        - echo "no current test implemented for replication"

- scenario: "Uninstall PowerScale Driver (Minimal)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"

- scenario: "Install PowerScale Driver (Minimal, Standalone), Enable/Disable Observability"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Disable [observability] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"

- scenario: "Install PowerScale Driver (Minimal, With Observability and Custom Certs)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerscale_observability_top_custom_cert.yaml"
  tags:
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"

- scenario: "Install PowerScale Driver (Minimal, With Authorization V1)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_n_minus_1.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerscale_auth.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerscale"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Set up secret with template [testfiles/authorization-templates/rootCertificate.pem] name [proxy-server-root-certificate] in namespace [isilon] for [authSidecarCert]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver (Minimal), Enable/Disable Authorization V1 module"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_n_minus_1.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerscale.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerscale"
    # - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Enable [authorization] module from CR [2]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set secret for driver from CR [2] to [isilon-creds-auth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Set up secret with template [testfiles/authorization-templates/rootCertificate.pem] name [proxy-server-root-certificate] in namespace [isilon] for [authSidecarCert]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Disable [authorization] module from CR [2]"
    - "Set secret for driver from CR [2] to [isilon-creds]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/rootCertificate.pem] for [authSidecarCert]"

- scenario: "Install PowerScale Driver (Minimal, With Authorization V2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powerscale_auth2.0.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorization"
    - "authorizationproxyserver"
    - "powerscale"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscaleAuth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerscale]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install Powerflex Driver (Minimal, With Replication)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powerflex_replica.yaml"
  tags:
    - "powerflex"
    - "replication"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: HelloWorld
      run:
        - echo "no current test implemented for replication"

- scenario: "Install PowerMax Driver (Minimal, Standalone)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [powermax] driver spec from CR [1]"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with Mount Credentials (Minimal)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_secret.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-creds] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [powermax] driver spec from CR [1]"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver (Minimal, With no forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_with_no_forceRemoveDriver.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to true"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not nstalled"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver (Minimal, With false forceRemoveDriver)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_with_false_forceRemoveDriver.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [1] CSM has forceRemoveDriver set to false"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    # cleanup
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver (Minimal, With Observability)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_observability.yaml"
  tags:
    - "powermax"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"

- scenario: "Install PowerMax Driver (Minimal, With Auth V1 module)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powermax_reverseproxy_authorization.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powermax] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powermax] driver from CR [2] is not installed"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install Powermax Driver (Minimal, With Authorization v2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
    - "testfiles/minimal-testfiles/storage_csm_powermax_authorization.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1


- scenario: "Install Powermax Driver (Minimal, Standalone), Enable Resiliency"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"

- scenario: "Install Powermax Driver (Minimal, With Resiliency), Disable Resiliency module"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_resiliency.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"

- scenario: "Install Powermax Driver (Minimal, With Replication)"
  paths:
    - "testfiles/minimal-testfiles/storage_csm_powermax_replica.yaml"
  tags:
    - "powermax"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
  customTest:
    - name: HelloWorld
      run:
        - echo "no current test implemented for replication"
