# List of E2E Tests Scenarios

- scenario: "Install Authorization Proxy Server V1"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server.yaml"
  tags:
    - "authorizationproxyserver"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"

# Upgrade from V1 to V2 is not supported. This test is to install a previous version of Auth V1 and upgrade to the next.
- scenario: "Install Authorization Proxy Server V1 and upgrade"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_n_minus_1.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server.yaml"
  tags:
    - "authorizationproxyserver"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    # upgrade
    - "Upgrade from custom resource [1] to [2]"
    - "Validate custom resource [2]"
    - "Validate [authorization-proxy-server] module from CR [2] is installed"
    - "Delete custom resource [2]"
    - "Validate [authorization] module pods from CR [1] is not installed"

- scenario: "Install Authorization Proxy Server V2"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorizationproxyserver"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Delete Authorization CRs for [powerflex]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"

- scenario: "Install Authorization CRDs for V2"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorizationproxyserver"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [1]"
    - "Validate [csmroles] CRD for Authorization is installed"
    - "Validate [csmtenants] CRD for Authorization is installed"
    - "Validate [storages] CRD for Authorization is installed"
    - "Delete Authorization CRDs [1]"

- scenario: "Install Authorization Proxy Server V2 With Default Redis Storage Class"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server_default_redis.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorizationproxyserver"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Delete Authorization CRs for [powerflex]"
    - "Delete custom resource [1]"
    - "Delete Authorization CRDs [2]"
    - "Validate [authorization] module pods from CR [1] is not installed"

- scenario: "Install Authorization CRDs for V2"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorizationproxyserver"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [1]"
    - "Validate [csmroles] CRD for Authorization is installed"
    - "Validate [csmtenants] CRD for Authorization is installed"
    - "Validate [storages] CRD for Authorization is installed"
    - "Delete Authorization CRDs [1]"

- scenario: "Install Authorization Proxy Server V2 With Multiple Vaults"  # TODO: Should this be using the multiple_vaults YAML?
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server_default_redis.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorizationproxyserver"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Delete Authorization CRs for [powerflex]"
    - "Delete custom resource [1]"
    - "Delete Authorization CRDs [2]"
    - "Validate [authorization] module pods from CR [1] is not installed"

- scenario: "Install Authorization Proxy Server V1 with alternate namespace"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_alt_ns.yaml"
  tags:
    - "authorizationproxyserver"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"

- scenario: "Install Authorization Proxy Server & PowerFlex Driver (With Authorization V1), Upgrade both Authorization Proxy Server and PowerFlex Driver"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_n_minus_1.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server.yaml"
    - "testfiles/storage_csm_powerflex_auth_n_minus_1.yaml"
    - "testfiles/storage_csm_powerflex_auth.yaml"
  tags:
    - "powerflex"
    - "authorization"
    - "authorizationproxyserver"
    # - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powerflex] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Run custom test"
    # upgrade
    - "Upgrade from custom resource [1] to [2]"
    - "Validate [authorization-proxy-server] module from CR [2] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Upgrade from custom resource [3] to [4]"
    - "Validate custom resource [4]"
    - "Validate [powerflex] driver from CR [4] is installed"
    - "Validate [authorization] module from CR [4] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [4]"
    - "Delete custom resource [4]"
    - "Validate [powerflex] driver from CR [4] is not installed"
    - "Delete custom resource [2]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver(Standalone)"
  paths:
    - "testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Set up ephemeral volume properties [testfiles/powerscale-templates/ephemeral.properties] for [pscaleEphemeral]"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/ephemeral.properties] for [pscaleEphemeral]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
        - cert-csi test ephemeral-volume --pods 1 --driver csi-isilon.dellemc.com --attr testfiles/powerscale-templates/ephemeral.properties

- scenario: "Install PowerScale Driver with first alternate sample file"
  paths:
    - "testfiles/storage_csm_powerscale_alt_vals_1.yaml"
  tags:
    - "powerscale"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [powerscale-altifs] and template [testfiles/powerscale-templates/powerscale-storageclass-template-altifs.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [csm-creds] in namespace [dell] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template-altifs.yaml] for [pscale]"
  customTest:
    - name: check_parameters.sh
      run:
        - /bin/bash check_parameters.sh testfiles/powerscale_alt_vals_1_values.csv dell powerscale

- scenario: "Install PowerScale Driver with second alternate sample file"
  paths:
    - "testfiles/storage_csm_powerscale_alt_vals_2.yaml"
  tags:
    - "powerscale"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [csm-creds] in namespace [dell] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
  customTest:
    - name: check_parameters.sh
      run:
        - /bin/bash check_parameters.sh testfiles/powerscale_alt_vals_2_values.csv dell powerscale

- scenario: "Install PowerScale Driver with third alternate sample file"
  paths:
    - "testfiles/storage_csm_powerscale_alt_vals_3.yaml"
  tags:
    - "powerscale"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set [control-plane] node label"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [csm-creds] in namespace [dell] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Remove [control-plane] node label"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
  customTest:
    - name: check_parameters.sh
      run:
        - /bin/bash check_parameters.sh testfiles/powerscale_alt_vals_3_values.csv dell powerscale

- scenario: "Install PowerScale Driver with health monitor"
  paths:
    - "testfiles/storage_csm_powerscale_health_monitor.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [csm-creds] in namespace [dell] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Run custom test"
    - "Run [Cert CSI and check_parameters.sh]"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
  customTest:
    - name: Cert CSI and check_parameters.sh
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
        - /bin/bash check_parameters.sh testfiles/powerscale_health_monitor_values.csv dell powerscale

- scenario: "Install PowerScale Driver(With Authorization V1)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_no_cert.yaml"
    - "testfiles/storage_csm_powerscale_auth.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerscale"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Set up secret with template [testfiles/authorization-templates/rootCertificate.pem] name [proxy-server-root-certificate] in namespace [isilon] for [authSidecarCert]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver(With Replication)"
  paths:
    - "testfiles/storage_csm_powerscale_replica.yaml"
  tags:
    - "powerscale"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
  customTest:
    - name: HelloWorld
      run:
        - echo "no current test implemented for replication"

- scenario: "Install PowerScale Driver(Standalone), Enable/Disable Replication"
  paths:
    - "testfiles/storage_csm_powerscale.yaml"
    - "testfiles/storage_csm_powerscale_replica.yaml"
  tags:
    - "powerscale"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is not installed"
    - "Enable [replication] module from CR [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [replication] module from CR [2] is installed"
    - "Run custom test"
    - "Disable [replication] module from CR [1]"
    - "Validate [replication] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
  customTest:
    - name: HelloWorld
      run:
        - echo "no current test implemented for replication"

- scenario: "Uninstall PowerScale Driver"
  paths:
    - "testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"

- scenario: "Install PowerScale Driver, Enable/Disable Authorization V1 module"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_no_cert.yaml"
    - "testfiles/storage_csm_powerscale.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerscale"
    # - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Enable [authorization] module from CR [2]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set secret for driver from CR [2] to [isilon-creds-auth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Set up secret with template [testfiles/authorization-templates/rootCertificate.pem] name [proxy-server-root-certificate] in namespace [isilon] for [authSidecarCert]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Disable [authorization] module from CR [2]"
    - "Set secret for driver from CR [2] to [isilon-creds]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Validate [authorization] module pods from CR [2] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/rootCertificate.pem] for [authSidecarCert]"

- scenario: "Install PowerScale Driver(With Observability)"
  paths:
    - "testfiles/storage_csm_powerscale_observability.yaml"
  tags:
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver(Standalone), Enable/Disable Observability"
  paths:
    - "testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Disable [observability] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"

- scenario: "Install PowerScale Driver(With Observability and Custom Certs)"
  paths:
    - "testfiles/storage_csm_powerscale_observability_top_custom_cert.yaml"
  tags:
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"

- scenario: "Install PowerScale Driver(With Authorization V1 and Observability)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_no_cert.yaml"
    - "testfiles/storage_csm_powerscale_observability_auth.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerscale"
    - "observability"
    # - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Set up secret with template [testfiles/authorization-templates/rootCertificate.pem] name [proxy-server-root-certificate] in namespace [isilon] for [authSidecarCert]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Validate [authorization] module pods from CR [2] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
    - "Restore template [testfiles/authorization-templates/rootCertificate.pem] for [authSidecarCert]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver(Standalone), Enable Authorization V1, Enable Observability"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_no_cert.yaml"
    - "testfiles/storage_csm_powerscale.yaml"
  tags:
    - "authorizationproxyserver"
    - "powerscale"
    - "observability"
    - "authorization"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Validate [observability] module from CR [2] is not installed"
    - "Enable [authorization] module from CR [2]"
    - "Set secret for driver from CR [2] to [isilon-creds-auth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Set up secret with template [testfiles/authorization-templates/rootCertificate.pem] name [proxy-server-root-certificate] in namespace [isilon] for [authSidecarCert]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is not installed"
    - "Enable [observability] module from CR [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/authorization-templates/rootCertificate.pem] for [authSidecarCert]"

- scenario: "Install PowerScale Driver(With Authorization V1 and Observability), Disable Observability module, Disable Authorization module"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_no_cert.yaml"
    - "testfiles/storage_csm_powerscale_observability_auth.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerscale"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Set up secret with template [testfiles/authorization-templates/rootCertificate.pem] name [proxy-server-root-certificate] in namespace [isilon] for [authSidecarCert]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is installed"
    - "Disable [observability] module from CR [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is not installed"
    - "Disable [authorization] module from CR [2]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Set secret for driver from CR [2] to [isilon-creds]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Validate [observability] module from CR [2] is not installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
    - "Restore template [testfiles/authorization-templates/rootCertificate.pem] for [authSidecarCert]"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver(Standalone)"
  paths:
    - "testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Set up ephemeral volume properties [testfiles/powerflex-templates/ephemeral.properties] for [pflexEphemeral]"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/ephemeral.properties] for [pflexEphemeral]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
        - cert-csi test ephemeral-volume --pods 1 --driver csi-vxflexos.dellemc.com --attr testfiles/powerflex-templates/ephemeral.properties

- scenario: "Install PowerFlex Driver with first set of alternate values"
  paths:
    - "testfiles/storage_csm_powerflex_alt_vals_1.yaml"
    - "testfiles/powerflex-cert-secret-0.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [2]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: check_parameters.sh
      run:
        - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_1_values.csv dell powerflex

- scenario: "Install PowerFlex Driver with second set of alternate values"
  paths:
    - "testfiles/storage_csm_powerflex_alt_vals_2.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: check_parameters.sh
      run:
        - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_2_values.csv dell powerflex

- scenario: "Install PowerFlex Driver with third set of alternate values"
  paths:
    - "testfiles/storage_csm_powerflex_alt_vals_3.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set [control-plane] node label"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Remove [control-plane] node label"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: check_parameters.sh
      run:
        - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_3_values.csv dell powerflex

- scenario: "Install PowerFlex Driver with fourth set of alternate values"
  paths:
    - "testfiles/storage_csm_powerflex_alt_vals_4.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: check_parameters.sh
      run:
        - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_4_values.csv dell powerflex

- scenario: "Install PowerFlex Driver without SDC"
  paths:
    - "testfiles/storage_csm_powerflex_no_sdc.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: check_parameters.sh
      run:
        - /bin/bash check_parameters.sh testfiles/powerflex_no_sdc_values.csv dell powerflex

- scenario: "Install PowerFlex Driver with health monitor"
  paths:
    - "testfiles/storage_csm_powerflex_health_monitor.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI and check_parameters.sh
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
        - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_5_values.csv dell powerflex

- scenario: "Uninstall PowerFlex Driver"
  paths:
    - "testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install PowerFlex Driver (With Authorization V2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/storage_csm_powerflex_auth.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorization"
    - "authorizationproxyserver"
    # - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerflex]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"
    - "Restore template [testfiles/powerflex-templates/csm-authorization-config.json] for [pflexAuthSidecar]"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflexAuth]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver (With Authorization V2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/storage_csm_powerscale_auth.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorization"
    - "authorizationproxyserver"
    - "powerscale"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerscale]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: "Install PowerScale Driver(With Authorization V2 and Observability)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/storage_csm_powerscale_observability_auth.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerscale"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerscale]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2

- scenario: Install PowerScale Driver(With Authorization V2 and Observability), Disable Observability module, Disable Authorization module"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/storage_csm_powerscale_observability_auth.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerscale"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerscale] for CR [1]"
    - "Create storageclass with name [op-e2e-isilon] and template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] name [isilon-creds-auth] in namespace [isilon] for [pscaleAuth]"
    - "Set up secret with template [testfiles/powerscale-templates/karavi-authorization-config.json] name [karavi-authorization-config] in namespace [isilon] for [pscaleAuthSidecar]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is installed"
    - "Disable [observability] module from CR [2]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is not installed"
    - "Disable [authorization] module from CR [2]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Set secret for driver from CR [2] to [isilon-creds]"
    - "Validate [powerscale] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Validate [observability] module from CR [2] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerscale]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"
    - "Restore template [testfiles/powerscale-templates/powerscale-storageclass-template.yaml] for [pscale]"
    - "Restore template [testfiles/powerscale-templates/powerscale-auth-secret-template.yaml] for [pscaleAuth]"
    - "Restore template [testfiles/powerscale-templates/karavi-authorization-config.json] for [pscaleAuthSidecar]"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"

- scenario: "Install PowerFlex Driver (With Authorization V2), Upgrade driver and authorization sidecar"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/storage_csm_powerflex_auth_n_minus_1.yaml"
    - "testfiles/storage_csm_powerflex_auth.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorization"
    - "authorizationproxyserver"
    # - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [4]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # upgrade
    - "Upgrade from custom resource [2] to [3]"
    - "Validate custom resource [3]"
    - "Validate [powerflex] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powerflex] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powerflex]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [4]"
    - "Restore template [testfiles/powerflex-templates/csm-authorization-config.json] for [pflexAuthSidecar]"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflexAuth]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver, Downgrade driver to supported version"
  paths:
    - "testfiles/storage_csm_powerflex.yaml"
    - "testfiles/storage_csm_powerflex_downgrade.yaml"
  tags:
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run custom test"
    # downgrade, using the same method as upgrade. hence the same name
    - "Upgrade from custom resource [1] to [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver (With Observability)"
  paths:
    - "testfiles/storage_csm_powerflex_observability.yaml"
  tags:
    - "observability"
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver(With Observability and Custom Certs)"
  paths:
    - "testfiles/storage_csm_powerflex_observability_custom_cert.yaml"
  tags:
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"

- scenario: "Install PowerFlex Driver(With Observability and Custom Cert for Otel-Collector)"
  paths:
    - "testfiles/storage_csm_powerflex_observability_otel_custom_cert.yaml"
  tags:
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"

- scenario: "Install PowerFlex Driver (Standalone), Enable/Disable Observability"
  paths:
    - "testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
    - "observability"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Disable [observability] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"

- scenario: "Install Powerflex Driver (With Replication)"
  paths:
    - "testfiles/storage_csm_powerflex_replica.yaml"
  tags:
    - "powerflex"
    - "replication"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"

- scenario: "Install Powerflex Driver (Standalone), Enable/Disable Replication"
  paths:
    - "testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
    - "replication"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is not installed"
    - "Enable [replication] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is installed"
    - "Disable [replication] module from CR [1]"
    - "Validate [replication] driver from CR [1] is installed"
    - "Validate [replication] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"

- scenario: "Install PowerFlex Driver(Standalone), Enable Authorization V1, Enable Observability"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_no_cert.yaml"
    - "testfiles/storage_csm_powerflex.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerflex"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Enable [authorization] module from CR [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is not installed"
    #    - "Set secret for driver from CR [2] to [test-vxflexos-config-auth]"
    - "Enable [observability] module from CR [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"


- scenario: "Install PowerFlex Driver(With Authorization V1 and Observability)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server_no_cert.yaml"
    - "testfiles/storage_csm_powerflex_observability_auth.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powerflex"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: Install PowerFlex Driver(With Authorization V2 and Observability), Disable Observability module, Disable Authorization module"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/storage_csm_powerflex_observability_auth.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    # - "powerflex"
    - "observability"
    # - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [3]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powerflex] for CR [1]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is installed"
    - "Disable [observability] module from CR [2]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Validate [observability] module from CR [2] is not installed"
    - "Disable [authorization] module from CR [2]"
    - "Set secret for driver from CR [1] to [test-vxflexos-config]"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Validate [observability] module from CR [2] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Delete Authorization CRs for [powerflex]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [3]"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflexAuth]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/csm-authorization-config.json] for [pflexAuthSidecar]"

- scenario: "Install PowerFlex Driver(With Resiliency)"
  paths:
    - "testfiles/storage_csm_powerflex_resiliency.yaml"
  tags:
    - "powerflex"
    - "resiliency"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"

- scenario: "Install PowerFlex Driver(Standalone), Enable/Disable Resiliency"
  paths:
    - "testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerflex"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"

- scenario: "Install PowerScale Driver(With Resiliency)"
  paths:
    - "testfiles/storage_csm_powerscale_resiliency.yaml"
  tags:
    - "powerscale"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"
  customTest:
    - name: CustomTest
      run:
        - echo "no current test for resiliency"

- scenario: "Install PowerScale Driver(Standalone), Enable/Disable Resiliency"
  paths:
    - "testfiles/storage_csm_powerscale.yaml"
  tags:
    - "powerscale"
    - "resiliency"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"

- scenario: "Install PowerScale Driver and PowerFlex Driver, uninstall PowerFlex Driver"
  paths:
    - "testfiles/storage_csm_powerscale.yaml"
    - "testfiles/storage_csm_powerflex.yaml"
  tags:
    - "powerscale"
    - "powerflex"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Set up secret with template [testfiles/powerscale-templates/powerscale-secret-template.yaml] name [isilon-creds] in namespace [isilon] for [pscale]"
    - "Apply custom resource [1]"
    - "Apply custom resource [2]"
    - "Validate custom resource [1]"
    - "Validate custom resource [2]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Validate [powerscale] driver from CR [1] is installed"
    - "Validate [powerflex] driver from CR [2] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerscale] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerscale-templates/powerscale-secret-template.yaml] for [pscale]"

- scenario: "Install PowerStore Driver(Standalone)"
  paths:
    - "testfiles/storage_csm_powerstore.yaml"
  tags:
    - "powerstore"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pstore] and template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    # ephemeral.properties must be set up according to the storage class created
    - "Set up ephemeral volume properties [testfiles/powerstore-templates/ephemeral.properties] for [pstoreEphemeral]"
    # run cert-csi with the proper args for our storage class
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/ephemeral.properties] for [pstoreEphemeral]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pstore --chainNumber 2 --chainLength 2
        - cert-csi test ephemeral-volume --pods 1 --driver csi-powerstore.dellemc.com --attr testfiles/powerstore-templates/ephemeral.properties --fs ext4

- scenario: "Install PowerStore Driver(With Resiliency)"
  paths:
    - "testfiles/storage_csm_powerstore_resiliency.yaml"
  tags:
    - "powerstore"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pstore] and template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
  customTest:
    - name: CustomTest
      run:
        - echo "no current test for resiliency"

- scenario: "Install PowerStore Driver(Standalone), Enable Resiliency"
  paths:
    - "testfiles/storage_csm_powerstore.yaml"
  tags:
    - "powerstore"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pstore] and template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/powerstore-storageclass-template.yaml] for [pstore]"

- scenario: "Install PowerStore Driver with HBNFS (Standalone)"
  paths:
    - "testfiles/storage_csm_powerstore.yaml"
  tags:
    - "hbnfs"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Run [Is NFS Server Running]"
    - "Create storageclass with name [op-e2e-pstore-hbnfs] and template [testfiles/powerstore-templates/storage-class-hbnfs.yaml] for [pstore]"
    - "Set up secret with template [testfiles/powerstore-templates/powerstore-secret-template.yaml] name [powerstore-config] in namespace [powerstore] for [pstore]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is installed"
    # run cert-csi with the proper args for our storage class
    - "Run [Cert CSI]"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerstore] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerstore-templates/powerstore-secret-template.yaml] for [pstore]"
    - "Restore template [testfiles/powerstore-templates/storage-class-hbnfs.yaml] for [pstore]"
  customTest:
    - name: Is NFS Server Running
      run:
        - /bin/bash scripts/verify_nfs.sh
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pstore-hbnfs --chainNumber 2 --chainLength 2

- scenario: "Install Unity Driver(Standalone)"
  paths:
    - "testfiles/storage_csm_unity.yaml"
  tags:
    - "unity"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-unity] and template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
    - "Set up secret with template [testfiles/unity-templates/unity-secret-template.yaml] name [unity-creds] in namespace [unity] for [unity]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [unity] driver from CR [1] is installed"
    # ephemeral.properties must be set up according to the storage class created
    - "Set up ephemeral volume properties [testfiles/unity-templates/ephemeral.properties] for [unityEphemeral]"
    # run cert-csi with the proper args for our storage class
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [unity] driver from CR [1] is not installed"
    - "Restore template [testfiles/unity-templates/unity-secret-template.yaml] for [unity]"
    - "Restore template [testfiles/unity-templates/unity-storageclass-template.yaml] for [unity]"
    - "Restore template [testfiles/unity-templates/ephemeral.properties] for [unityEphemeral]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-unity --chainNumber 2 --chainLength 2
        - cert-csi test ephemeral-volume --pods 1 --driver csi-unity.dellemc.com --attr testfiles/unity-templates/ephemeral.properties

- scenario: "Install App Mobility (Standalone)"
  paths:
    - "testfiles/application-mobility-templates/csm_application_mobility_vanilla.yaml"
  tags:
    - "applicationmobility"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up application mobility CR [testfiles/application-mobility-templates/csm_application_mobility_vanilla.yaml]"
    - "Apply custom resource [1]"
    - "Validate [application-mobility] module from CR [1] is installed"
    - "Restore template [testfiles/application-mobility-templates/csm_application_mobility_vanilla.yaml] for [application-mobility]"
    - "Delete custom resource [1]"
    - "Validate [application-mobility] module from CR [1] is not installed"

- scenario: "Install App Mobility and powerflex driver in different CRs"
  paths:
    - "testfiles/storage_csm_powerflex.yaml"
    - "testfiles/application-mobility-templates/csm_application_mobility_vanilla.yaml"
  tags:
    - "applicationmobility"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up application mobility CR [testfiles/application-mobility-templates/csm_application_mobility_vanilla.yaml]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Install [sample-app]"
    - "Apply custom resource [2]"
    - "Validate [application-mobility] module from CR [2] is installed"
    - "Run custom test"
    - "Uninstall [sample-app]"
    # Last steps perform Clean UP
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/application-mobility-templates/csm_application_mobility_vanilla.yaml] for [application-mobility]"
    - "Enable forceRemoveModule on CR [1]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Validate [application-mobility] module from CR [2] is not installed"
  customTest:
    - name: verify app-mobility
      run:
        - /bin/bash verify-app-mobility.sh

- scenario: "Install powerflex driver, enable and disable application-mobility"
  paths:
    - "testfiles/application-mobility-templates/powerflex_noAM.yaml"
  tags:
    - "applicationmobility"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up application mobility CR [testfiles/application-mobility-templates/powerflex_noAM.yaml]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [vxflexos-app-mobility-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [application-mobility] module from CR [1] is not installed"
    - "Enable [application-mobility] module from CR [1]"
    - "Validate [application-mobility] module from CR [1] is installed"
    - "Disable [application-mobility] module from CR [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Validate [application-mobility] module from CR [1] is not installed"
    # Last steps perform Clean UP
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/application-mobility-templates/powerflex_noAM.yaml] for [application-mobility]"
    - "Enable forceRemoveModule on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"

- scenario: "Install Application Mobility v1.03 and upgrade to v1.1.0, downgrade back to v1.0.3"
  paths:
    - "testfiles/application-mobility-templates/csm_application_mobility_n_minus_1.yaml"
    - "testfiles/application-mobility-templates/csm_application_mobility_with_pflex.yaml"
  tags:
    - "applicationmobility"
    - "sanity"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up application mobility CR [testfiles/application-mobility-templates/csm_application_mobility_n_minus_1.yaml]"
    - "Set up application mobility CR [testfiles/application-mobility-templates/csm_application_mobility_with_pflex.yaml]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [vxflexos-app-mobility-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [application-mobility] module from CR [1] is installed"
    - "Validate [powerflex] driver from CR [1] is installed"
    # upgrade
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [application-mobility] module from CR [2] is installed"
    # downgrade
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [application-mobility] module from CR [1] is installed"
    # clean up
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/application-mobility-templates/csm_application_mobility_with_pflex.yaml] for [application-mobility]"
    - "Restore template [testfiles/application-mobility-templates/csm_application_mobility_n_minus_1.yaml] for [application-mobility]"

- scenario: "Install App Mobility when Velero and Cert-Manager already installed"
  paths:
    - "testfiles/application-mobility-templates/csm_application_mobility_no_velero.yaml"
  tags:
    - "applicationmobility"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up application mobility CR [testfiles/application-mobility-templates/velero-values.yaml]"
    - "Install [velero]"
    - "Install [cert-manager]"
    - "Set up application mobility CR [testfiles/application-mobility-templates/csm_application_mobility_no_velero.yaml]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [vxflexos-app-mobility-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [application-mobility] module from CR [1] is installed"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Install [sample-app]"
    - "Run custom test"
    - "Uninstall [sample-app]"
    - "Uninstall [velero]"
    # Last steps perform Clean UP
    - "Uninstall [cert-manager]"
    - "Enable forceRemoveModule on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/application-mobility-templates/csm_application_mobility_no_velero.yaml] for [application-mobility]"
    - "Restore template [testfiles/application-mobility-templates/velero-values.yaml] for [application-mobility]"
  customTest:
    - name: verify app-mobility
      run:
        - /bin/bash verify-app-mobility.sh

- scenario: "Install App Mobility Velero with different env variables than default"
  paths:
    - "testfiles/application-mobility-templates/alt-velero-secret.yaml"
    - "testfiles/application-mobility-templates/csm_application_mobility_with_pflex_alt.yaml"
  tags:
    - "applicationmobility"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install [cert-manager]"
    - "Set up application mobility CR [testfiles/application-mobility-templates/alt-velero-secret.yaml]"
    - "Apply custom resource [1]"
    - "Set up application mobility CR [testfiles/application-mobility-templates/csm_application_mobility_with_pflex_alt.yaml]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [vxflexos-app-mobility-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [2]"
    - "Validate [application-mobility] module from CR [2] is installed"
    - "Validate [powerflex] driver from CR [2] is installed"
    - "Install [sample-app]"
    - "Run custom test"
    # Last steps perform Clean Up
    - "Uninstall [sample-app]"
    - "Uninstall [cert-manager]"
    - "Enable forceRemoveModule on CR [2]"
    - "Delete custom resource [1]"
    - "Delete custom resource [2]"
    - "Validate [powerflex] driver from CR [2] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/application-mobility-templates/csm_application_mobility_with_pflex_alt.yaml] for [application-mobility]"
  customTest:
    - name: verify app-mobility
      run:
        - /bin/bash verify-app-mobility.sh

- scenario: "Install App Mobility with powerflex driver- default"
  paths:
    - "testfiles/application-mobility-templates/csm_application_mobility_with_pflex.yaml"
  tags:
    - "applicationmobility"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Set up application mobility CR [testfiles/application-mobility-templates/csm_application_mobility_with_pflex.yaml]"
    - "Create storageclass with name [op-e2e-vxflexos] and template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Set up secret with template [testfiles/powerflex-templates/powerflex-secret-template.yaml] name [vxflexos-app-mobility-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [application-mobility] module from CR [1] is installed"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Install [sample-app]"
    - "Run custom test"
    - "Uninstall [sample-app]"
    # Last steps perform Clean UP
    - "Enable forceRemoveModule on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Restore template [testfiles/powerflex-templates/powerflex-secret-template.yaml] for [pflex]"
    - "Restore template [testfiles/powerflex-templates/powerflex-storageclass-template.yaml] for [pflex]"
    - "Restore template [testfiles/application-mobility-templates/csm_application_mobility_with_pflex.yaml] for [application-mobility]"
  customTest:
    - name: verify app-mobility
      run:
        - /bin/bash verify-app-mobility.sh

- scenario: "Install PowerMax Driver(Standalone)"
  paths:
    - "testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver(Standalone) without powermax-array-config.yaml"
  paths:
    - "testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/storage_csm_powermax.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/storage_csm_powermax.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1
- scenario: "Install PowerMax Driver with Mount Credentials"
  paths:
    - "testfiles/storage_csm_powermax_secret.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with Mount Credentials without powermax-array-config.yaml"
  paths:
    - "testfiles/storage_csm_powermax_secret.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/storage_csm_powermax_secret.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Restore template [testfiles/storage_csm_powermax_secret.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with Mount Credentials, Enable Observability"
  paths:
    - "testfiles/storage_csm_powermax_secret_sidecar.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver without powermax-array-config.yaml with Mount Credentials, Enable Observability"
  paths:
    - "testfiles/storage_csm_powermax_secret_sidecar.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/storage_csm_powermax_secret_sidecar.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/storage_csm_powermax_secret_sidecar.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with Mount Credentials (Sidecar)"
  paths:
    - "testfiles/storage_csm_powermax_secret_sidecar.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver without powermax-array-config.yaml with Mount Credentials (Sidecar)"
  paths:
    - "testfiles/storage_csm_powermax_secret_sidecar.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/storage_csm_powermax_secret_sidecar.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Restore template [testfiles/storage_csm_powermax_secret_sidecar.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with Mount Credentials (Sidecar), Enable Observability"
  paths:
    - "testfiles/storage_csm_powermax_secret_sidecar.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is not installed"
    - "Enable [observability] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with Mount Credentials (Sidecar), Enable Authorization v1"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server.yaml"
    - "testfiles/storage_csm_powermax_secret_sidecar.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powermax] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Enable [authorization] module from CR [2]"
    - "Validate [powermax] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [2] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver without powermax-array-config.yaml with Mount Credentials (Sidecar), Enable Authorization v1"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server.yaml"
    - "testfiles/storage_csm_powermax_secret_sidecar.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxUseSecret]"
    - "Set up creds with template [testfiles/storage_csm_powermax_secret_sidecar.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powermax] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is not installed"
    - "Enable [authorization] module from CR [2]"
    - "Validate [powermax] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [2] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-template.yaml] for [pmaxUseSecret]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Restore template [testfiles/storage_csm_powermax_secret_sidecar.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with TLS (Standalone)"
  paths:
    - "testfiles/storage_csm_powermax_tls.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret with SAN namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1
- scenario: "Install PowerMax Driver without powermax-array-config.yaml with TLS (Standalone)"
  paths:
    - "testfiles/storage_csm_powermax_tls.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret with SAN namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/storage_csm_powermax_tls.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/storage_csm_powermax_tls.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver(Sidecar)"
  paths:
    - "testfiles/storage_csm_powermax_sidecar.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver(Sidecar) without powermax-array-config.yaml"
  paths:
    - "testfiles/storage_csm_powermax_sidecar.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/storage_csm_powermax_sidecar.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/storage_csm_powermax_sidecar.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with TLS (Sidecar)"
  paths:
    - "testfiles/storage_csm_powermax_sidecar_tls.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret with SAN namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver with TLS (Sidecar) without powermax-array-config.yaml"
  paths:
    - "testfiles/storage_csm_powermax_sidecar_tls.yaml"
  tags:
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret with SAN namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/storage_csm_powermax_sidecar_tls.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/storage_csm_powermax_sidecar_tls.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver(With Observability)"
  paths:
    - "testfiles/storage_csm_powermax_observability.yaml"
  tags:
    - "powermax"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"

- scenario: "Install PowerMax Driver(With Observability) without powermax-array-configmap.yaml"
  paths:
    - "testfiles/storage_csm_powermax_observability.yaml"
  tags:
    - "powermax"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/storage_csm_powermax_observability.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [observability] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/storage_csm_powermax_observability.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver (With Auth V1 module)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server.yaml"
    - "testfiles/storage_csm_powermax_reverseproxy_authorization.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powermax] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [2] is not installed"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxAuthArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install PowerMax Driver without powermax-array-config.yaml (With Auth V1 module)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v1_proxy_server.yaml"
    - "testfiles/storage_csm_powermax_reverseproxy_authorization.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Set up creds with template [testfiles/storage_csm_powermax_reverseproxy_authorization.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [2]"
    - "Validate custom resource [2]"
    - "Validate [powermax] driver from CR [2] is installed"
    - "Validate [authorization] module from CR [2] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [2]"
    - "Delete custom resource [2]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [2] is not installed"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Restore template [testfiles/storage_csm_powermax_reverseproxy_authorization.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install Powermax Driver (With Authorization v2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
    - "testfiles/storage_csm_powermax_authorization.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxAuthArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxAuthArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install Powermax Driver without powermax-array-config.yaml (With Authorization v2)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
    - "testfiles/storage_csm_powermax_authorization.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/storage_csm_powermax_authorization.yaml] for [pmaxArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/storage_csm_powermax_authorization.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install Powermax Driver with Mount Credentials and Authorization v2"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
    - "testfiles/storage_csm_powermax_secret_auth_v2.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-auth-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxAuthArrayConfig]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-auth-template.yaml] for [pmaxAuthSidecar]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install Powermax Driver without powermax-array-config.yaml with Mount Credentials and Authorization v2"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
    - "testfiles/storage_csm_powermax_secret_auth_v2.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up secret with template [testfiles/powermax-templates/powermax-use-secret-auth-template.yaml] name [powermax-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up creds with template [testfiles/storage_csm_powermax_secret_auth_v2.yaml] for [pmaxArrayConfig]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-use-secret-auth-template.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/storage_csm_powermax_secret_auth_v2.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install Powermax Driver (With Authorization v2 and Observability)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
    - "testfiles/storage_csm_powermax_observability_authorization.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "observability"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxAuthArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [karavi] for [pmaxReverseProxy]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Validate [observability] module from CR [3] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxAuthArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install Powermax Driver without powermax-array-config.yaml (With Authorization v2 and Observability)"
  paths:
    - "testfiles/authorization-templates/storage_csm_authorization_v2_proxy_server.yaml"
    - "testfiles/authorization-templates/storage_csm_authorization_v2_crds.yaml"
    - "testfiles/storage_csm_powermax_observability_authorization.yaml"
  tags:
    - "authorizationproxyserver"
    - "authorization"
    - "observability"
    - "powermax"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Install Authorization CRDs [2]"
    - "Create [authorization-proxy-server] prerequisites from CR [1]"
    - "Apply custom resource [1]"
    - "Validate [authorization-proxy-server] module from CR [1] is installed"
    - "Configure authorization-proxy-server for [powermax] for CR [1]"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up secret with template [testfiles/powermax-templates/csm-authorization-config.json] name [karavi-authorization-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/storage_csm_powermax_observability_authorization.yaml] for [pmaxArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxReverseProxy]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] name [powermax-reverseproxy-config] in namespace [karavi] for [pmaxReverseProxy]"
    - "Apply custom resource [3]"
    - "Validate custom resource [3]"
    - "Validate [powermax] driver from CR [3] is installed"
    - "Validate [authorization] module from CR [3] is installed"
    - "Validate [observability] module from CR [3] is installed"
    - "Run custom test"
    # cleanup
    - "Enable forceRemoveDriver on CR [3]"
    - "Delete custom resource [3]"
    - "Validate [powermax] driver from CR [3] is not installed"
    - "Delete Authorization CRs for [powermax]"
    - "Delete custom resource [1]"
    - "Validate [authorization] module pods from CR [1] is not installed"
    - "Delete Authorization CRDs [2]"
    - "Restore template [testfiles/powermax-templates/csm-authorization-config.json] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config_auth.yaml] for [pmaxReverseProxy]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/storage_csm_powermax_observability_authorization.yaml] for [pmaxArrayConfig]"
  customTest:
    - name: Cert CSI
      run:
        - cert-csi test vio --sc op-e2e-pmax  --chainLength 1 --chainNumber 1

- scenario: "Install Powermax Driver(Standalone), Enable Resiliency"
  paths:
    - "testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"


- scenario: "Install Powermax Driver(Standalone) without powermax-array-config.yaml, Enable Resiliency"
  paths:
    - "testfiles/storage_csm_powermax.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/storage_csm_powermax.yaml] for [pmaxArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    - "Enable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/storage_csm_powermax.yaml] for [pmaxArrayConfig]"

- scenario: "Install Powermax Driver(With Resiliency), Disable Resiliency module"
  paths:
    - "testfiles/storage_csm_powermax_resiliency.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/powermax-templates/powermax-array-config.yaml] for [pmaxArrayConfig]"

- scenario: "Install Powermax Driver(With Resiliency) without powermax-array-config.yaml, Disable Resiliency module"
  paths:
    - "testfiles/storage_csm_powermax_resiliency.yaml"
  tags:
    - "powermax"
    - "resiliency"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create storageclass with name [op-e2e-pmax] and template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Set up reverse proxy tls secret namespace [powermax]"
    - "Set up creds with template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Set up creds with template [testfiles/storage_csm_powermax_resiliency.yaml] for [pmaxArrayConfig]"
    - "Set up configMap with template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] name [powermax-reverseproxy-config] in namespace [powermax] for [pmaxAuthSidecar]"
    - "Apply custom resource [1]"
    - "Validate custom resource [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is installed"
    - "Disable [resiliency] module from CR [1]"
    - "Validate [powermax] driver from CR [1] is installed"
    - "Validate [resiliency] module from CR [1] is not installed"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powermax] driver from CR [1] is not installed"
    - "Restore template [testfiles/powermax-templates/powermax_reverse_proxy_config.yaml] for [pmaxAuthSidecar]"
    - "Restore template [testfiles/powermax-templates/powermax-storageclass-template.yaml] for [pmax]"
    - "Restore template [testfiles/powermax-templates/powermax-secret-template.yaml] for [pmaxCreds]"
    - "Restore template [testfiles/storage_csm_powermax_resiliency.yaml] for [pmaxArrayConfig]"

- scenario: "Install PowerFlex Driver (Standalone) With Node Zoning"
  paths:
    - "testfiles/storage_csm_powerflex.yaml"
  tags:
    - "zoning"
    - "powerflex"
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Run [Apply Node Labels]"
    - "Set up temporary secret with template [testfiles/powerflex-templates/powerflex-zoning-secret-template.yaml] name [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is installed"
    - "Run [Validate Node Labels]"
    # cleanup
    - "Enable forceRemoveDriver on CR [1]"
    - "Delete custom resource [1]"
    - "Validate [powerflex] driver from CR [1] is not installed"
    - "Run [Remove Node Labels]"
  customTest:
    - name: Apply Node Labels
      run:
        - kubectl get nodes --show-labels
        - /bin/bash modify_zoning_labels.sh add zone.csi-vxflexos.dellemc.com=zoneA zone.csi-vxflexos.dellemc.com=zoneB
        - kubectl get nodes --show-labels
    - name: Validate Node Labels
      run:
        - /bin/bash modify_zoning_labels.sh validate-zoning
    - name: Remove Node Labels
      run:
        - /bin/bash modify_zoning_labels.sh remove-all-zones
        - kubectl get nodes --show-labels
