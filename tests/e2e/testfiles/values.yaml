# List of E2E Tests Scenarios
#- scenario: "Install PowerScale Driver(Standalone)"
#  CRs:
#    powerscale: "testfiles/storage_csm_powerscale.yaml"
#  configFiles:
#    storageclass: "testfiles/powerscale-templates/powerscale-storageclass-template.yaml"
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#  modules:
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Create storageclass with name [op-e2e-isilon] from template [storageclass] for [pscale]"
#    - "Create secret from template [secret] named [test-isilon-creds] in namespace [test-isilon] for [pscale]"
#    - "Apply custom resource [powerscale]"
#    - "Validate custom resource [powerscale]"
#    - "Validate [powerscale] driver from CR [powerscale] is installed"
#    - "Run custom test"
#    # Last three steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [powerscale]"
#    - "Delete custom resource [powerscale]"
#    - "Restore template [secret] for [pscale]"
#    - "Restore template [storageclass] for [pscale]"
#    - "Delete namespace [test-isilon]"
#  customTest:
#    name: Cert CSI
#    run: 
#      - ./cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
#
#- scenario: "Install PowerScale Driver with first alternate sample file"
#  CRs: 
#    powerscale: "testfiles/storage_csm_powerscale_alt_vals_1.yaml"
#  configFiles:
#    storageclass: "testfiles/powerscale-templates/powerscale-storageclass-template-altifs.yaml"
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#    cert0: "testfiles/powerscale-cert-secret-0.yaml"
#    cert1: "testfiles/powerscale-cert-secret-1.yaml"
#    cert2: "testfiles/powerscale-cert-secret-2.yaml"
#  modules:
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [dell]"
#    - "Create storageclass with name [powerscale-altifs] from template [storageclass] for [pscale]"
#    - "Create secret from template [secret] named [csm-creds] in namespace [dell] for [pscale]"
#    - "Apply yaml file [cert0]"
#    - "Apply yaml file [cert1]"
#    - "Apply yaml file [cert2]"
#    - "Apply custom resource [powerscale]"
#    - "Validate custom resource [powerscale]"
#    - "Validate [powerscale] driver from CR [powerscale] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [powerscale]"
#    - "Delete custom resource [powerscale]"
#    - "Delete yaml file [cert0]"
#    - "Delete yaml file [cert1]"
#    - "Delete yaml file [cert2]"
#    - "Restore template [secret] for [pscale]"
#    - "Restore template [storageclass] for [pscale]"
#    - "Delete namespace [dell]"
#  customTest:
#    name: Cert CSI and check_parameters.sh
#    run: 
#      - ./cert-csi test vio --sc powerscale-altifs --chainNumber 2 --chainLength 2
#      - /bin/bash check_parameters.sh testfiles/powerscale_alt_vals_1_values.csv dell powerscale
#
#- scenario: "Install PowerScale Driver with second alternate sample file"
#  CRs: 
#    powerscale: "testfiles/storage_csm_powerscale_alt_vals_2.yaml"
#  configFiles:
#    storageclass: "testfiles/powerscale-templates/powerscale-storageclass-template.yaml"
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#  modules:
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [dell]"
#    - "Create storageclass with name [op-e2e-isilon] from template [storageclass] for [pscale]"
#    - "Create secret from template [secret] named [csm-creds] in namespace [dell] for [pscale]"
#    - "Apply custom resource [powerscale]"
#    - "Validate custom resource [powerscale]"
#    - "Validate [powerscale] driver from CR [powerscale] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [powerscale]"
#    - "Delete custom resource [powerscale]"
#    - "Restore template [secret] for [pscale]"
#    - "Restore template [storageclass] for [pscale]"
#    - "Delete namespace [dell]"
#  customTest:
#    name: Cert CSI and check_parameters.sh
#    run: 
#      - ./cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
#      - /bin/bash check_parameters.sh testfiles/powerscale_alt_vals_2_values.csv dell powerscale
#
#- scenario: "Install PowerScale Driver with third alternate sample file"
#  CRs: 
#    powerscale: "testfiles/storage_csm_powerscale_alt_vals_3.yaml"
#  configFiles:
#    storageclass: "testfiles/powerscale-templates/powerscale-storageclass-template.yaml"
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#  modules:
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Set [control-plane] node label"
#    - "Create namespace [dell]"
#    - "Create storageclass with name [op-e2e-isilon] from template [storageclass] for [pscale]"
#    - "Create secret from template [secret] named [csm-creds] in namespace [dell] for [pscale]"
#    - "Apply custom resource [powerscale]"
#    - "Validate custom resource [powerscale]"
#    - "Validate [powerscale] driver from CR [powerscale] is installed"
#    - "Run custom test"
#    # Last four steps perform Clean Up. Need to reinstall pscale with forceRemoveDriver to fully clean delete
#    - "Remove [control-plane] node label"
#    - "Enable forceRemoveDriver on CR [powerscale]"
#    - "Delete custom resource [powerscale]"
#    - "Restore template [secret] for [pscale]"
#    - "Restore template [storageclass] for [pscale]"
#    - "Delete namespace [dell]"
#  customTest:
#    name: Cert CSI and check_parameters.sh
#    run: 
#      - ./cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
#      - /bin/bash check_parameters.sh testfiles/powerscale_alt_vals_3_values.csv dell powerscale
#
#- scenario: "Install PowerScale Driver with health monitor"
#  CRs: 
#    powerscale: "testfiles/storage_csm_powerscale_health_monitor.yaml"
#  configFiles:
#    storageclass: "testfiles/powerscale-templates/powerscale-storageclass-template.yaml"
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#  modules:
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [dell]"
#    - "Create storageclass with name [op-e2e-isilon] from template [storageclass] for [pscale]"
#    - "Create secret from template [secret] named [csm-creds] in namespace [dell] for [pscale]"
#    - "Apply custom resource [powerscale]"
#    - "Validate custom resource [powerscale]"
#    - "Validate [powerscale] driver from CR [powerscale] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [powerscale]"
#    - "Delete custom resource [powerscale]"
#    - "Restore template [secret] for [pscale]"
#    - "Restore template [storageclass] for [pscale]"
#    - "Delete namespace [dell]"
#  customTest:
#    name: Cert CSI and check_parameters.sh
#    run: 
#      - ./cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
#      - /bin/bash check_parameters.sh testfiles/powerscale_health_monitor_values.csv dell powerscale
#
#- scenario: "Install PowerScale Driver(With Authorization)"
#  CRs:
#    auth: "testfiles/authorization-templates/csm_authorization_proxy_server.yaml"
#    pscale: "testfiles/storage_csm_powerscale_auth.yaml"
#  configFiles:
#    sc: "testfiles/powerscale-templates/powerscale-storageclass-template.yaml"
#    pscaleAuthSecret: "testfiles/powerscale-templates/powerscale-auth-secret-template.yaml"
#    karaviAuthSecret: "testfiles/powerscale-templates/karavi-authorization-config.json"
#    proxyCert: "testfiles/authorization-templates/rootCertificate.pem"
#  modules:
#    - "authorizationproxyserver"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Create [authorization-proxy-server] prerequisites from CR [auth]"
#    - "Apply custom resource [auth]"
#    - "Validate [authorization-proxy-server] module from CR [auth] is installed"
#    - "Create storageclass with name [op-e2e-isilon] from template [sc] for [pscale]"
#    - "Create secret from template [pscaleAuthSecret] named [test-isilon-creds-auth] in namespace [test-isilon] for [pscaleAuth]"
#    - "Create secret from template [karaviAuthSecret] named [karavi-authorization-config] in namespace [test-isilon] for [pscaleAuthSidecar]"
#    - "Create secret from template [proxyCert] named [proxy-server-root-certificate] in namespace [test-isilon] for [authSidecarCert]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Run custom test"
#    # Last six steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete custom resource [auth]"
#    - "Restore template [sc] for [pscale]"
#    - "Restore template [pscaleAuthSecret] for [pscaleAuth]"
#    - "Restore template [karaviAuthSecret] for [pscaleAuthSidecar]"
#    - "Delete namespace [test-isilon]"
#  customTest:
#    name: Cert CSI
#    run: 
#      - ./cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
#
#- scenario: "Install PowerScale Driver(Standalone), Enable Authorization"
#  CRs:
#    auth: "testfiles/authorization-templates/csm_authorization_proxy_server.yaml"
#    pscale: "testfiles/storage_csm_powerscale.yaml"
#  configFiles:
#    storageclass: "testfiles/powerscale-templates/powerscale-storageclass-template.yaml"
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#    karaviAuthSecret: "testfiles/powerscale-templates/karavi-authorization-config.json"
#    proxyCert: "testfiles/authorization-templates/rootCertificate.pem"
#  modules:
#    - "authorizationproxyserver"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Create [authorization-proxy-server] prerequisites from CR [auth]"
#    - "Apply custom resource [auth]"
#    - "Validate [authorization-proxy-server] module from CR [auth] is installed"
#    - "Configure authorization-proxy-server for [powerscale]"
#    - "Create storageclass with name [op-e2e-isilon] from template [storageclass] for [pscale]"
#    - "Create secret from template [secret] named [test-isilon-creds] in namespace [test-isilon] for [pscale]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is not installed"
#    - "Enable [authorization] module from CR [pscale]"
#    - "Set secret for driver from CR [pscale] to [test-isilon-creds-auth]"
#    - "Create secret from template [karaviAuthSecret] named [karavi-authorization-config] in namespace [test-isilon] for [pscaleAuthSidecar]"
#    - "Create secret from template [proxyCert] named [proxy-server-root-certificate] in namespace [test-isilon] for [authSidecarCert]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Run custom test"
#    # Last six steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete custom resource [auth]"
#    - "Restore template [secret] for [pscale]"
#    - "Restore template [karaviAuthSecret] for [pscaleAuthSidecar]"
#    - "Restore template [storageclass] for [pscale]"
#    - "Delete namespace [test-isilon]"
#  customTest:
#    name: Cert CSI
#    run: 
#      - ./cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
#
#- scenario: "Uninstall PowerScale Driver"
#  CRs:
#    pscale: "testfiles/storage_csm_powerscale_replica.yaml"
#  configFiles:
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#  modules:
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Create secret from template [secret] named [test-isilon-creds] in namespace [test-isilon] for [pscale]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Restore template [secret] for [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is not installed"
#    - "Delete namespace [test-isilon]"
#
#- scenario: Install PowerScale Driver(With Authorization), Disable Authorization module"
#  paths:
#    auth: "testfiles/authorization-templates/csm_authorization_proxy_server.yaml"
#    pscale: "testfiles/storage_csm_powerscale_auth.yaml"
#  configFiles:
#    sc: "testfiles/powerscale-templates/powerscale-storageclass-template.yaml"
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#    pscaleAuthSecret: "testfiles/powerscale-templates/powerscale-auth-secret-template.yaml"
#    karaviAuthSecret: "testfiles/powerscale-templates/karavi-authorization-config.json"
#    proxyCert: "testfiles/authorization-templates/rootCertificate.pem"
#  modules:
#    - "authorizationproxyserver"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Create [authorization-proxy-server] prerequisites from CR [auth]"
#    - "Apply custom resource [auth]"
#    - "Validate [authorization-proxy-server] module from CR [auth] is installed"
#    - "Configure authorization-proxy-server for [powerscale]"
#    - "Create storageclass with name [op-e2e-isilon] from template [sc] for [pscale]"
#    - "Create secret from template [pscaleAuthSecret] named [test-isilon-creds-auth] in namespace [test-isilon] for [pscaleAuth]"
#    - "Create secret from template [karaviAuthSecret] named [karavi-authorization-config] in namespace [test-isilon] for [pscaleAuthSidecar]"
#    - "Create secret from template [proxyCert] named [proxy-server-root-certificate] in namespace [test-isilon] for [authSidecarCert]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Create secret from template [secret] named [test-isilon-creds-auth] in namespace [test-isilon] for [pscale]"
#    - "Disable [authorization] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is not installed"
#    - "Run custom test"
#    # Last six steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete custom resource [auth]"
#    - "Restore template [secret] for [pscale]"
#    - "Restore template [pscaleAuthSecret] for [pscaleAuth]"
#    - "Restore template [karaviAuthSecret] for [pscaleAuthSidecar]"
#    - "Delete namespace [test-isilon]"
#  customTest:
#    name: Cert CSI
#    run:
#      - ./cert-csi test vio --sc op-e2e-isilon --chainNumber 2 --chainLength 2
#
#- scenario: "Install PowerScale Driver(With Replication)"
#  CRs:
#    pscale: "testfiles/storage_csm_powerscale_replica.yaml"
#  modules:
#    - "replication"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [replication] module from CR [pscale] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"
#  customTest:
#    name: HelloWorld 
#    run: 
#      - "echo Hello && echo World"
#
#- scenario: "Install PowerScale Driver(Standalone), Enable Replication"
#  CRs:
#    pscale: "testfiles/storage_csm_powerscale_replica.yaml"
#  modules:
#    - "replication"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [replication] module from CR [pscale] is not installed"
#    - "Enable [replication] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [replication] module from CR [pscale] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"
#  customTest:
#    name: HelloWorld 
#    run: 
#      - "echo Hello && echo World"
#
#- scenario: Install PowerScale Driver(With Replication), Disable Replication module"
#  CRs:
#    pscale: "testfiles/storage_csm_powerscale_replica.yaml"
#  modules:
#    - "replication"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [replication] module from CR [pscale] is installed"
#    - "Disable [replication] module from CR [pscale]"
#    - "Validate [replication] driver from CR [pscale] is installed"
#    - "Validate [replication] module from CR [pscale] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"
#
#- scenario: "Install PowerScale Driver(With Observability)"
#  CRs: 
#    pscale: "testfiles/storage_csm_powerscale_observability.yaml"
#  modules:
#    - "observability"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"
#
#- scenario: "Install PowerScale Driver(Standalone), Enable/Disable Observability"
#  CRs: 
#    pscale: "testfiles/storage_csm_powerscale_observability.yaml"
#  modules:
#    - "observability"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is not installed"
#    - "Enable [observability] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is installed"
#    - "Disable [observability] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"
#
#- scenario: Install PowerScale Driver(With Observability), Disable Observability module"
#  CRs: 
#    pscale: "testfiles/storage_csm_powerscale_observability.yaml"
#  modules:
#    - "observability"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is installed"
#    - "Disable [observability] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"
#
#- scenario: "Install PowerScale Driver(With Authorization and Observability)"
#  CRs: 
#    pscale: "testfiles/storage_csm_powerscale_observability.yaml"
#  modules:
#    - "observability"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"
#  customTest:
#    name: Cert CSI
#    run: 
#      - ./cert-csi test vio --sc isilon --chainNumber 2 --chainLength 2
#
#- scenario: "Install PowerScale Driver(Standalone), Enable Authorization, Enable Observability"
#  CRs: 
#    auth: "testfiles/authorization-templates/csm_authorization_proxy_server.yaml"
#    pscale: "testfiles/storage_csm_powerscale.yaml"
#  configFiles:
#    sc: "testfiles/powerscale-templates/powerscale-storageclass-template.yaml"
#    secret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
#    karaviAuthSecret: "testfiles/powerscale-templates/karavi-authorization-config.json"
#    proxyCert: "testfiles/authorization-templates/rootCertificate.pem"
#  modules:
#    - "authorizationproxyserver"
#    - "observability"
#    - "authorization"
#    - "Create secret from template [pscaleAuthSecret] named [test-isilon-creds-auth] in namespace [test-isilon] for [pscaleAuth]"
#    - "Create secret from template [karaviAuthSecret] named [karavi-authorization-config] in namespace [test-isilon] for [pscaleAuthSidecar]"
#    - "Create secret from template [proxyCert] named [proxy-server-root-certificate] in namespace [test-isilon] for [authSidecarCert]"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Create [authorization-proxy-server] prerequisites from CR [auth]"
#    - "Apply custom resource [auth]"
#    - "Validate [authorization-proxy-server] module from CR [auth] is installed"
#    - "Configure authorization-proxy-server for [powerscale]"
#    - "Create storageclass with name [op-e2e-isilon] from template [sc] for [pscale]"
#    - "Create secret from template [secret] named [test-isilon-creds] in namespace [test-isilon] for [pscale]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is not installed"
#    - "Validate [observability] module from CR [pscale] is not installed"
#    - "Enable [authorization] module from CR [pscale]"
#    - "Set secret for driver from CR [pscale] to [test-isilon-creds-auth]"
#    - "Create secret from template [karaviAuthSecret] named [karavi-authorization-config] in namespace [test-isilon] for [pscaleAuthSidecar]"
#    - "Create secret from template [proxyCert] named [proxy-server-root-certificate] in namespace [test-isilon] for [authSidecarCert]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is not installed"
#    - "Enable [observability] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete custom resource [auth]"
#    - "Restore template [secret] for [pscale]"
#    - "Restore template [karaviAuthSecret] for [pscaleAuthSidecar]"
#    - "Delete namespace [test-isilon]"
#
#- scenario: Install PowerScale Driver(With Authorization and Observability), Disable Observability module, Disable Authorization module"
#  CRs: 
#    pscale: "testfiles/storage_csm_powerscale_observability_auth.yaml"
#  modules:
#    - "observability"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is installed"
#    - "Disable [observability] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is not installed"
#    - "Disable [authorization] module from CR [pscale]"
#    - "Set secret for driver from CR [pscale] to [test-isilon-creds]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is not installed"
#    - "Validate [observability] module from CR [pscale] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"
#
#- scenario: Install PowerScale Driver(With Authorization and Observability), Disable Authorization module, Disable Observability module"
#  CRs: 
#    pscale: "testfiles/storage_csm_powerscale_observability_auth.yaml"
#  modules:
#    - "observability"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-isilon]"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is installed"
#    - "Validate [observability] module from CR [pscale] is installed"
#    - "Disable [authorization] module from CR [pscale]"
#    - "Set secret for driver from CR [pscale] to [test-isilon-creds]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is not installed"
#    - "Validate [observability] module from CR [pscale] is installed"
#    - "Disable [observability] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [authorization] module from CR [pscale] is not installed"
#    - "Validate [observability] module from CR [pscale] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#    - "Delete namespace [test-isilon]"

- scenario: "Install PowerFlex Driver(Standalone)"
  CRs:
    pflex: "testfiles/storage_csm_powerflex.yaml"
  configFiles:
    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
  modules:
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create namespace [test-vxflexos]"
    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
    - "Create secret from template [secret] named [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [pflex]"
    - "Validate custom resource [pflex]"
    - "Validate [powerflex] driver from CR [pflex] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [pflex]"
    - "Delete custom resource [pflex]"
    - "Restore template [secret] for [pflex]"
    - "Restore template [sc] for [pflex]"
    - "Delete namespace [test-vxflexos]"
  customTest:
    name: Cert CSI
    run: 
      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2

- scenario: "Install PowerFlex Driver with first set of alternate values"
  CRs:
    pflex: "testfiles/storage_csm_powerflex_alt_vals_1.yaml"
  configFiles:
    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
  modules:
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create namespace [dell]"
    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
    - "Create secret from template [secret] named [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [pflex]"
    - "Validate custom resource [pflex]"
    - "Validate [powerflex] driver from CR [pflex] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [pflex]"
    - "Delete custom resource [pflex]"
    - "Restore template [secret] for [pflex]"
    - "Restore template [sc] for [pflex]"
    - "Delete namespace [dell]"
  customTest:
    name: Cert CSI and check_parameters.sh
    run: 
      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
      - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_1_values.csv dell powerflex

- scenario: "Install PowerFlex Driver with second set of alternate values"
  CRs:
    pflex: "testfiles/storage_csm_powerflex_alt_vals_2.yaml"
  configFiles:
    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
  modules:
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create namespace [dell]"
    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
    - "Create secret from template [secret] named [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [pflex]"
    - "Validate custom resource [pflex]"
    - "Validate [powerflex] driver from CR [pflex] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [pflex]"
    - "Delete custom resource [pflex]"
    - "Restore template [secret] for [pflex]"
    - "Restore template [sc] for [pflex]"
    - "Delete namespace [dell]"
  customTest:
    name: Cert CSI and check_parameters.sh
    run: 
      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
      - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_2_values.csv dell powerflex

- scenario: "Install PowerFlex Driver with third set of alternate values"
  CRs:
    pflex: "testfiles/storage_csm_powerflex_alt_vals_3.yaml"
  configFiles:
    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
  modules:
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create namespace [dell]"
    - "Set [control-plane] node label"
    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
    - "Create secret from template [secret] named [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [pflex]"
    - "Validate custom resource [pflex]"
    - "Validate [powerflex] driver from CR [pflex] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [pflex]"
    - "Delete custom resource [pflex]"
    - "Remove [control-plane] node label"
    - "Restore template [secret] for [pflex]"
    - "Restore template [sc] for [pflex]"
    - "Delete namespace [dell]"
  customTest:
    name: Cert CSI and check_parameters.sh
    run: 
      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
      - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_3_values.csv dell powerflex

- scenario: "Install PowerFlex Driver with fourth set of alternate values"
  CRs:
    pflex: "testfiles/storage_csm_powerflex_alt_vals_4.yaml"
  configFiles:
    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
  modules:
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create namespace [dell]"
    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
    - "Create secret from template [secret] named [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [pflex]"
    - "Validate custom resource [pflex]"
    - "Validate [powerflex] driver from CR [pflex] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [pflex]"
    - "Delete custom resource [pflex]"
    - "Restore template [secret] for [pflex]"
    - "Restore template [sc] for [pflex]"
    - "Delete namespace [dell]"
  customTest:
    name: Cert CSI and check_parameters.sh
    run: 
      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
      - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_4_values.csv dell powerflex

- scenario: "Install PowerFlex Driver with fifth set of alternate values"
  CRs:
    pflex: "testfiles/storage_csm_powerflex_alt_vals_5.yaml"
  configFiles:
    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
  modules:
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create namespace [dell]"
    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
    - "Create secret from template [secret] named [powerflex-config] in namespace [dell] for [pflex]"
    - "Apply custom resource [pflex]"
    - "Validate custom resource [pflex]"
    - "Validate [powerflex] driver from CR [pflex] is installed"
    - "Run custom test"
    # Last two steps perform Clean Up
    - "Enable forceRemoveDriver on CR [pflex]"
    - "Delete custom resource [pflex]"
    - "Restore template [secret] for [pflex]"
    - "Restore template [sc] for [pflex]"
    - "Delete namespace [dell]"
  customTest:
    name: Cert CSI and check_parameters.sh
    run: 
      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
      - /bin/bash check_parameters.sh testfiles/powerflex_alt_vals_5_values.csv dell powerflex

- scenario: "Uninstall PowerFlex Driver"
  CRs:
    pflex: "testfiles/storage_csm_powerflex.yaml"
  configFiles:
    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
  modules:
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create namespace [test-vxflexos]"
    - "Create secret from template [secret] named [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Apply custom resource [pflex]"
    - "Validate custom resource [pflex]"
    - "Validate [powerflex] driver from CR [pflex] is installed"
    - "Enable forceRemoveDriver on CR [pflex]"
    - "Delete custom resource [pflex]"
    - "Validate [powerflex] driver from CR [pflex] is not installed"
    - "Restore template [secret] for [pflex]"
    - "Delete namespace [test-vxflexos]"

#- scenario: "Install PowerFlex Driver (With Authorization)"
#  CRs:
#    auth: "testfiles/authorization-templates/csm_authorization_proxy_server.yaml"
#    pflex: "testfiles/storage_csm_powerflex_auth.yaml"
#  configFiles:
#    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
#    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
#    authSecret: "testfiles/powerflex-templates/csm-authorization-config.json"
#  modules:
#    - "authorization"
#    - "authorizationproxyserver"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-vxflexos]"
#    - "Create [authorization-proxy-server] prerequisites from CR [auth]"
#    - "Apply custom resource [auth]"
#    - "Validate [authorization-proxy-server] module from CR [auth] is installed"
#    - "Configure authorization-proxy-server for [powerflex]"
#    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
#    - "Create secret from template [secret] named [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
#    - "Create secret from template [authSecret] named [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Run custom test"
#    # Last steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [auth]"
#    - "Delete custom resource [pflex]"
#    - "Restore template [authSecret] for [pflexAuthSidecar]"
#    - "Restore template [secret] for [pflexAuth]"
#    - "Restore template [sc] for [pflex]"
#    - "Delete namespace [test-vxflexos]"
#  customTest:
#    name: Cert CSI
#    run:
#      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
#
#- scenario: "Install PowerFlex Driver(Standalone), Enable Authorization"
#  CRs:
#    auth: "testfiles/authorization-templates/csm_authorization_proxy_server.yaml"
#    pflex: "testfiles/storage_csm_powerflex_auth.yaml"
#  configFiles:
#    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
#    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
#    authSecret: "testfiles/powerflex-templates/csm-authorization-config.json"
#  modules:
#    - "authorizationproxyserver"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-vxflexos]"
#    - "Create [authorization-proxy-server] prerequisites from CR [auth]"
#    - "Apply custom resource [auth]"
#    - "Validate [authorization-proxy-server] module from CR [auth] is installed"
#    - "Configure authorization-proxy-server for [powerflex]"
#    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
#    - "Create secret from template [secret] named [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
#    - "Create secret from template [authSecret] named [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
#    - "Restore template [secret] for [pflex]"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is not installed"
#    - "Create secret from template [secret] named [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
#    - "Enable [authorization] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is installed"
#    - "Run custom test"
#    # Last  steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [auth]"
#    - "Delete custom resource [pflex]"
#    - "Restore template [authSecret] for [pflexAuthSidecar]"
#    - "Restore template [secret] for [pflexAuth]"
#    - "Restore template [sc] for [pflex]"
#    - "Delete namespace [test-vxflexos]"
#  customTest:
#    name: Cert CSI
#    run:
#      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
#
#- scenario: Install PowerFlex Driver(With Authorization), Disable Authorization module"
#  CRs:
#    auth: "testfiles/authorization-templates/csm_authorization_proxy_server.yaml"
#    pflex: "testfiles/storage_csm_powerflex_auth.yaml"
#  configFiles:
#    sc: "testfiles/powerflex-templates/powerflex-storageclass-template.yaml"
#    secret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
#    authSecret: "testfiles/powerflex-templates/csm-authorization-config.json"
#  modules:
#    - "authorization"
#    - "authorizationproxyserver"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create namespace [test-vxflexos]"
#    - "Create [authorization-proxy-server] prerequisites from CR [auth]"
#    - "Apply custom resource [auth]"
#    - "Validate [authorization-proxy-server] module from CR [auth] is installed"
#    - "Configure authorization-proxy-server for [powerflex]"
#    - "Create storageclass with name [op-e2e-vxflexos] from template [sc] for [pflex]"
#    - "Create secret from template [secret] named [test-vxflexos-config] in namespace [test-vxflexos] for [pflexAuth]"
#    - "Create secret from template [authSecret] named [karavi-authorization-config] in namespace [test-vxflexos] for [pflexAuthSidecar]"
#    - "Restore template [secret] for [pflexAuth]"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is installed"
#    - "Run custom test"
#    - "Disable [authorization] module from CR [pflex]"
#    - "Create secret from template [secret] named [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is not installed"
#    - "Run custom test"
#    # Last steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [auth]"
#    - "Delete custom resource [pflex]"
#    - "Restore template [authSecret] for [pflexAuthSidecar]"
#    - "Restore template [secret] for [pflex]"
#    - "Restore template [sc] for [pflex]"
#    - "Delete namespace [test-vxflexos]"
#  customTest:
#    name: Cert CSI
#    run:
#      - ./cert-csi test vio --sc op-e2e-vxflexos --chainNumber 2 --chainLength 2
#
#- scenario: "Install PowerFlex Driver(With Observability)"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex_observability.yaml"
#  modules:
#    - "observability"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#
#- scenario: "Install PowerFlex Driver(Standalone), Enable/Disable Observability"
#  CRs: 
#    - "testfiles/storage_csm_powerflex.yaml"
#  modules:
#    - "observability"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is not installed"
#    - "Enable [observability] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is installed"
#    - "Disable [observability] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#
#- scenario: Install PowerFlex Driver(With Observability), Disable Observability module"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex_observability.yaml"
#  modules:
#    - "observability"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is installed"
#    - "Disable [observability] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#
#- scenario: "Install Powerflex Driver(With Replication)"
#  CRs:
#    pflex: "testfiles/storage_csm_powerflex_replica.yaml"
#  modules:
#    - "replication"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [replication] module from CR [pflex] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#  customTest:
#    name: HelloWorld 
#    run: 
#      - "echo Hello && echo World"
#
#- scenario: "Install Powerflex Driver(Standalone), Enable Replication"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex.yaml"
#  modules:
#    - "replication"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [replication] module from CR [pflex] is not installed"
#    - "Enable [replication] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [replication] module from CR [pflex] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#  customTest:
#    name: HelloWorld 
#    run: 
#      - "echo Hello && echo World"
#
#- scenario: Install PowerFlex Driver(With Replication), Disable Replication module"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex_replica.yaml"
#  modules:
#    - "replication"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [replication] module from CR [pflex] is installed"
#    - "Disable [replication] module from CR [pflex]"
#    - "Validate [replication] driver from CR [pflex] is installed"
#    - "Validate [replication] module from CR [pflex] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#
#- scenario: "Install PowerFlex Driver(With Authorization and Observability)"
#  CRs:
#    pflex: "testfiles/storage_csm_powerflex_observability_auth.yaml"
#  modules:
#    - "observability"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Set secret for driver from CR [pflex] to [test-vxflexos-config-auth]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#  customTest:
#    name: Cert CSI
#    run: 
#      - ./cert-csi test vio --sc vxflexos --chainNumber 2 --chainLength 2
#
#- scenario: "Install PowerFlex Driver(Standalone), Enable Authorization, Enable Observability"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex.yaml"
#  modules:
#    - "observability"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is not installed"
#    - "Validate [observability] module from CR [pflex] is not installed"
#    - "Enable [authorization] module from CR [pflex]"
#    - "Set secret for driver from CR [pflex] to [test-vxflexos-config-auth]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is not installed"
#    - "Enable [observability] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#
#- scenario: Install PowerFlex Driver(With Authorization and Observability), Disable Observability module, Disable Authorization module"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex_observability_auth.yaml"
#  modules:
#    - "observability"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Set secret for driver from CR [pflex] to [test-vxflexos-config-auth]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is installed"
#    - "Disable [observability] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is not installed"
#    - "Disable [authorization] module from CR [pflex]"
#    - "Set secret for driver from CR [pflex] to [test-vxflexos-config]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is not installed"
#    - "Validate [observability] module from CR [pflex] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#
#- scenario: Install PowerFlex Driver(With Authorization and Observability), Disable Authorization module, Disable Observability module"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex_observability_auth.yaml"
#  modules:
#    - "observability"
#    - "authorization"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Set secret for driver from CR [pflex] to [test-vxflexos-config-auth]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is installed"
#    - "Validate [observability] module from CR [pflex] is installed"
#    - "Disable [authorization] module from CR [pflex]"
#    - "Set secret for driver from CR [pflex] to [test-vxflexos-config]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is not installed"
#    - "Validate [observability] module from CR [pflex] is installed"
#    - "Disable [observability] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [authorization] module from CR [pflex] is not installed"
#    - "Validate [observability] module from CR [pflex] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#
#- scenario: "Install PowerFlex Driver(With Resiliency)"
#  CRs:
#    pflex: "testfiles/storage_csm_powerflex_resiliency.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [resiliency] module from CR [pflex] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#  customTest:
#    name: CustomTest 
#    run:
#     - "echo Todo"
#
#- scenario: "Install PowerFlex Driver(Standalone), Enable Resiliency"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [resiliency] module from CR [pflex] is not installed"
#    - "Enable [resiliency] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [resiliency] module from CR [pflex] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#  customTest:
#    name: CustomTest 
#    run:
#     - "echo Todo"
#
#- scenario: "Install PowerFlex Driver(With Resiliency), Disable Resiliency module"
#  CRs: 
#    pflex: "testfiles/storage_csm_powerflex_resiliency.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pflex]"
#    - "Validate custom resource [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [resiliency] module from CR [pflex] is installed"
#    - "Disable [resiliency] module from CR [pflex]"
#    - "Validate [powerflex] driver from CR [pflex] is installed"
#    - "Validate [resiliency] module from CR [pflex] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pflex]"
#    - "Delete custom resource [pflex]"
#
#- scenario: "Install PowerScale Driver(With Resiliency)"
#  CRs:
#    pscale: "testfiles/storage_csm_powerscale_resiliency.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [resiliency] module from CR [pscale] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#  customTest:
#    name: CustomTest 
#    run:
#     - "echo Todo"
#
#- scenario: "Install PowerScale Driver(Standalone), Enable Resiliency"
#  CRs: 
#    pscale: "testfiles/storage_csm_powerscale.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [resiliency] module from CR [pscale] is not installed"
#    - "Enable [resiliency] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [resiliency] module from CR [pscale] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#  customTest:
#    name: CustomTest 
#    run:
#     - "echo Todo"
#
#- scenario: "Install PowerScale Driver(With Resiliency), Disable Resiliency module"
#  CRs: 
#    pscale: "testfiles/storage_csm_powerscale_resiliency.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pscale]"
#    - "Validate custom resource [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [resiliency] module from CR [pscale] is installed"
#    - "Disable [resiliency] module from CR [pscale]"
#    - "Validate [powerscale] driver from CR [pscale] is installed"
#    - "Validate [resiliency] module from CR [pscale] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pscale]"
#    - "Delete custom resource [pscale]"
#
- scenario: "Install PowerScale Driver and PowerFlex Driver, uninstall PowerFlex Driver"
  paths:
    - "testfiles/storage_csm_powerscale.yaml"
    - "testfiles/storage_csm_powerflex.yaml"
  configFiles:
    pscaleSecret: "testfiles/powerscale-templates/powerscale-secret-template.yaml"
    pflexSecret: "testfiles/powerflex-templates/powerflex-secret-template.yaml"
  modules:
  steps:
    - "Given an environment with k8s or openshift, and CSM operator installed"
    - "Create namespace [test-vxflexos]"
    - "Create namespace [test-isilon]"
    - "Create secret from template [pflexSecret] named [test-vxflexos-config] in namespace [test-vxflexos] for [pflex]"
    - "Create secret from template [pscaleSecret] named [test-isilon-creds] in namespace [test-isilon] for [pscale]"
    - "Apply custom resource [pscale]"
    - "Apply custom resource [pflex]"
    - "Validate custom resource [pscale]"
    - "Validate custom resource [pflex]"
    - "Validate [powerscale] driver from CR [pscale] is installed"
    - "Validate [powerflex] driver from CR [pflex] is installed"
    - "Enable forceRemoveDriver on CR [pflex]"
    - "Delete custom resource [pflex]"
    - "Validate [powerscale] driver from CR [pscale] is installed"
    - "Validate [powerflex] driver from CR [pflex] is not installed"
    # Last four steps perform Clean Up
    - "Enable forceRemoveDriver on CR [pscale]"
    - "Delete custom resource [pscale]"
    - "Restore template [pflexSecret] for [pflex]"
    - "Restore template [pscaleSecret] for [pscale]"
    - "Delete namespace [test-vxflexos]"
    - "Delete namespace [test-isilon]"

#- scenario: "Install Authorization Proxy Server"
#  CRs:
#    auth: "testfiles/authorization-templates/csm_authorization_proxy_server.yaml"
#  modules:
#    - "authorizationproxyserver"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Create [authorization-proxy-server] prerequisites from CR [auth]"
#    - "Apply custom resource [auth]"
#    - "Validate [authorization-proxy-server] module from CR [auth] is installed"
#    - "Configure authorization-proxy-server for [powerscale]"
#    - "Delete custom resource [auth]"
#
#- scenario: "Install PowerStore Driver(Standalone)"
#  CRs: 
#    pstore: "testfiles/storage_csm_powerstore.yaml"
#  modules:
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pstore]"
#    - "Validate custom resource [pstore]"
#    - "Validate [powerstore] driver from CR [pstore] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pstore]"
#    - "Delete custom resource [pstore]"
#  customTest:
#    name: Cert CSI
#    run: 
#      - ./cert-csi test vio --sc powerstore --chainNumber 2 --chainLength 2
#
#- scenario: "Install PowerStore Driver(With Resiliency)"
#  CRs:
#    pstore: "testfiles/storage_csm_powerstore_resiliency.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pstore]"
#    - "Validate custom resource [pstore]"
#    - "Validate [powerstore] driver from CR [pstore] is installed"
#    - "Validate [resiliency] module from CR [pstore] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pstore]"
#    - "Delete custom resource [pstore]"
#  customTest:
#    name: CustomTest 
#    run:
#     - "echo Todo"
#
#- scenario: "Install PowerStore Driver(Standalone), Enable Resiliency"
#  CRs: 
#    pstore: "testfiles/storage_csm_powerstore.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pstore]"
#    - "Validate custom resource [pstore]"
#    - "Validate [powerstore] driver from CR [pstore] is installed"
#    - "Validate [resiliency] module from CR [pstore] is not installed"
#    - "Enable [resiliency] module from CR [pstore]"
#    - "Validate [powerstore] driver from CR [pstore] is installed"
#    - "Validate [resiliency] module from CR [pstore] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pstore]"
#    - "Delete custom resource [pstore]"
#  customTest:
#    name: CustomTest 
#    run:
#     - "echo Todo"
#
#- scenario: "Install PowerStore Driver(With Resiliency), Disable Resiliency module"
#  CRs: 
#    pstore: "testfiles/storage_csm_powerstore_resiliency.yaml"
#  modules:
#    - "resiliency"
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [pstore]"
#    - "Validate custom resource [pstore]"
#    - "Validate [powerstore] driver from CR [pstore] is installed"
#    - "Validate [resiliency] module from CR [pstore] is installed"
#    - "Disable [resiliency] module from CR [pstore]"
#    - "Validate [powerstore] driver from CR [pstore] is installed"
#    - "Validate [resiliency] module from CR [pstore] is not installed"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [pstore]"
#    - "Delete custom resource [pstore]"
#
#- scenario: "Install Unity Driver(Standalone)"
#  CRs: 
#    unity: "testfiles/storage_csm_unity.yaml"
#  modules:
#  steps:
#    - "Given an environment with k8s or openshift, and CSM operator installed"
#    - "Apply custom resource [unity]"
#    - "Validate custom resource [unity]"
#    - "Validate [unity] driver from CR [unity] is installed"
#    - "Run custom test"
#    # Last two steps perform Clean Up
#    - "Enable forceRemoveDriver on CR [unity]"
#    - "Delete custom resource [unity]"
#  customTest:
#    name: Cert CSI
#    run: 
#      - ./cert-csi test vio --sc unity --chainNumber 2 --chainLength 2