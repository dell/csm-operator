apiVersion: v1
kind: ServiceAccount
metadata:
  name: connectivity-client-docker-k8s
  namespace: <NAMESPACE>
  labels:
    app.kubernetes.io/name: connectivity-client-docker-k8s
    app.kubernetes.io/instance: ApexConnectivityClient
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: CSMOperator
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: connectivity-client-docker-k8s-configmap
  namespace: <NAMESPACE>
data:
  AGGREGATOR_URL: <AGGREGATOR_URL>
  ANNOUNCE_INTERVAL: "5m"
  MIN_BACKOFF: "5s"
  MAX_BACKOFF: "1m"
  DCM_CLIENT_SERVER_PORT: "9000"
  DCM_IDENTITY_LOCATION: "/home/connectivity-client/.certs"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: connectivity-client-docker-k8s
  namespace: <NAMESPACE>
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch", "create"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["list", "watch", "create"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["list", "watch"]
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["list", "watch"]
  - apiGroups: ["apps"]
    resources: ["daemonsets"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csidrivers"]
    verbs: ["list", "watch", "get"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["list","get", "create", "update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create", "delete", "update"]
  - apiGroups: ["storage.dell.com"]
    resources: ["containerstoragemodules"]
    verbs: ["list", "create", "get"]
  - apiGroups: ["mobility.storage.dell.com"]
    resources: ["backups"]
    verbs: ["list", "create", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: connectivity-client-docker-k8s
  namespace: <NAMESPACE>
subjects:
  - kind: ServiceAccount
    name: connectivity-client-docker-k8s
    namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: connectivity-client-docker-k8s
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: apex-connectivity-client
  namespace: <NAMESPACE>
  labels:
    app.kubernetes.io/name: connectivity-client-docker-k8s
    app.kubernetes.io/instance: ApexConnectivityClient
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: CSMOperator
spec:
  serviceName: connectivity-client-docker-k8s-headless-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: connectivity-client-docker-k8s
      app.kubernetes.io/instance: ApexConnectivityClient
  template:
    metadata:
      labels:
        app.kubernetes.io/name: connectivity-client-docker-k8s
        app.kubernetes.io/instance: ApexConnectivityClient
    spec:
      serviceAccountName: connectivity-client-docker-k8s
      terminationGracePeriodSeconds: 15
      securityContext:
        runAsNonRoot: true
        readOnlyRootFilesystem: false
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
      containers:
        - name: connectivity-client-docker-k8s
          image: "<CONNECTIVITY_CLIENT_IMAGE>"
          imagePullPolicy: Always
          args:
            - "--aggregator"
            - <AGGREGATOR_URL>
            - "--announce.interval"
            - 5m
            - <CACERT_OPTION>
            - <CACERTS>
          env:
            - name: LOG_LEVEL
              value: Info
            - name: AGGREGATOR_URL
              valueFrom:
                configMapKeyRef:
                  name: connectivity-client-docker-k8s-configmap
                  key: AGGREGATOR_URL
            - name: ANNOUNCE_INTERVAL
              valueFrom:
                configMapKeyRef:
                  name: connectivity-client-docker-k8s-configmap
                  key: ANNOUNCE_INTERVAL
            - name: MIN_BACKOFF
              valueFrom:
                configMapKeyRef:
                  name: connectivity-client-docker-k8s-configmap
                  key: MIN_BACKOFF
            - name: MAX_BACKOFF
              valueFrom:
                configMapKeyRef:
                  name: connectivity-client-docker-k8s-configmap
                  key: MAX_BACKOFF
            - name: DCM_CLIENT_SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  name: connectivity-client-docker-k8s-configmap
                  key: DCM_CLIENT_SERVER_PORT
            - name: DCM_IDENTITY_LOCATION
              valueFrom:
                configMapKeyRef:
                  name: connectivity-client-docker-k8s-configmap
                  key: DCM_IDENTITY_LOCATION
          volumeMounts:
            - name: ca-certs
              mountPath: "/opt/dellemc/certs"
              readOnly: true
            - name: certs-store-tmpdir
              mountPath: "/home/connectivity-client/.certs"
          resources:
            limits:
              memory: 75M
            requests:
              memory: 25M
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL            
        - name: kubernetes-proxy
          image: "<KUBERNETES_PROXY_IMAGE>"
          imagePullPolicy: Always
          command: [ "kubectl" ]
          args:
            - "proxy"
            - "--port=8001"
            - "--address=0.0.0.0"
            - "--accept-hosts=^.*$"
            - "--v=5"
          ports:
            - containerPort: 8001
          livenessProbe:
            httpGet:
              path: /api/v1
              port: 8001
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL            
        - name: cert-persister
          image: "<CERT_PERSISTER_IMAGE>"
          imagePullPolicy: Always
          env:
            - name: DCM_IDENTITY_LOCATION
              valueFrom:
                configMapKeyRef:
                  name: connectivity-client-docker-k8s-configmap
                  key: DCM_IDENTITY_LOCATION
          volumeMounts:
            - name: certs-store-tmpdir
              mountPath: "/home/connectivity-client/.certs"
          securityContext:
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL              
      initContainers:
        - name: connectivity-client-init
          image: "<ACC_INIT_CONTAINER_IMAGE>"
          imagePullPolicy: Always
          env:
            - name: DCM_IDENTITY_LOCATION
              valueFrom:
                configMapKeyRef:
                  name: connectivity-client-docker-k8s-configmap
                  key: DCM_IDENTITY_LOCATION
          command: ['sh', '-c', "if [ -s /dcm-client-secret-data/cert.pem ]; then cp -v /dcm-client-secret-data/cert.pem $DCM_IDENTITY_LOCATION/cert.pem; fi"]
          volumeMounts:
            - name: certs-store-tmpdir
              mountPath: "/home/connectivity-client/.certs"
            - name: connectivity-client-docker-k8s-cert
              mountPath: /dcm-client-secret-data
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL                          
      volumes:
        - name: ca-certs
          projected:
            sources:
              - secret:
                  name: connectivity-client-docker-k8s-loadbalancer-ca-cert
                  optional: true
                  items:
                    - key: loadbalancer_root_ca_cert.crt
                      path: loadbalancer_root_ca_cert.crt
              - secret:
                  name: connectivity-client-docker-k8s-aggregator-internal-ca-cert
                  optional: true
                  items:
                    - key: aggregator_internal_root_ca_cert.crt
                      path: aggregator_internal_root_ca_cert.crt
        - name: certs-store-tmpdir
          emptyDir:
            sizeLimit: 10Mi
        - name: connectivity-client-docker-k8s-cert
          secret:
            secretName: connectivity-client-docker-k8s-cert
            optional: true
