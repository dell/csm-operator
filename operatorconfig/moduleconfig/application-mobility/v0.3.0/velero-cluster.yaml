apiVersion: velero.io/v1
kind: BackupStorageLocation
metadata:
  name: <BSL_NAME>
  namespace: <NAMESPACE>
  annotations:
    "helm.sh/hook": post-install,post-upgrade,post-rollback
    "helm.sh/hook-delete-policy": before-hook-creation
  labels:
    app.kubernetes.io/name: Velero
    app.kubernetes.io/instance: 
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  provider: <SPEC_PROVIDER>
  default: 
  accessMode: <SPEC_ACCESS_MODE>
  objectStorage:
    bucket: <BUCKET_NAME>
    prefix: <BUCKET_PREFIX>

    caCert: <CA_CERT>
  config:
{{- range $key, $value := . }}
{{- $key | nindent 4 }}: {{ $value | quote }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: velero-cleanup-crds
  namespace: <NAMESPACE>
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: application-mobility
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  backoffLimit: 3
  template:
    metadata:
      name: velero-cleanup-crds
      labels:
      annotations:
    spec:
      imagePullSecrets:
        - name: 
      serviceAccountName: <SERVICE_ACCOUNT_NAME>
      containers:
        - name: kubectl
          image: <KUBECTL_IMAGEREPOSITORY>@<KUBECTL_IMAGEDIGEST>
          image: <KUBECTL_IMAGEREPOSITORY>:<KUBECTL_IMAGETAG>
          image: <KUBECTL_IMAGEREPOSITORY>:<KUBECTL_VERSION>
          imagePullPolicy: <IMAGE_PULLPOLICY>
          command:
            - /bin/sh
            - -c
            - >
              kubectl delete restore --all;
              kubectl delete backup --all;
              kubectl delete backupstoragelocation --all;
              kubectl delete volumesnapshotlocation --all;
              kubectl delete podvolumerestore --all;
              kubectl delete crd -l component=velero;
          securityContext: 
          resources:
      restartPolicy: OnFailure
      securityContext: 
      nodeSelector:
      tolerations:
      affinity:
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: velero-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: application-mobility
    app.kubernetes.io/managed-by: {{ .Release.Service }}
subjects:
  - kind: ServiceAccount
    namespace: <NAMESPACE>
    name: <SERVICE_ACCOUNT_NAME>
roleRef:
  kind: ClusterRole
  name: <RBAC_CLUSTERADMINISTRATOR_NAME>
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: velero-config-map
  namespace: <NAMESPACE>
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: application-mobility
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
data: <CONFIGMAP_DATA>
