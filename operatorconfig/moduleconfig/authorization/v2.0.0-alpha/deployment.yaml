apiVersion: v1
kind: Secret
metadata:
  name: redis-csm-secret
  namespace: <NAMESPACE>
type: kubernetes.io/basic-auth
stringData:
  password: K@ravi123!
---
# Proxy service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy-server
  namespace: <NAMESPACE>
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: proxy-server
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["watch"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["storages", "csmtenants"]
    verbs: ["get", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: proxy-server
subjects:
  - kind: ServiceAccount
    name: proxy-server
    namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: proxy-server
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy-server
  namespace: <NAMESPACE>
  labels:
    app: proxy-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy-server
  template:
    metadata:
      labels:
        csm: <NAME>
        app: proxy-server
    spec:
      serviceAccountName: proxy-server
      containers:
      - name: proxy-server
        image: <AUTHORIZATION_PROXY_SERVER_IMAGE>
        imagePullPolicy: Always
        env:
          - name: SENTINELS
            value: <AUTHORIZATION_REDIS_SENTINEL_VALUES>
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis-csm-secret
                key: password
        args:
          - "--redis-sentinel=$(SENTINELS)"
          - "--redis-password=$(REDIS_PASSWORD)"
          - "--tenant-service=tenant-service.<NAMESPACE>.svc.cluster.local:50051"
          - "--role-service=role-service.<NAMESPACE>.svc.cluster.local:50051"
          - "--storage-service=storage-service.<NAMESPACE>.svc.cluster.local:50051"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config-volume
          mountPath: /etc/karavi-authorization/config
        - name: storage-volume
          mountPath: /etc/karavi-authorization/storage
        - name: csm-config-params
          mountPath: /etc/karavi-authorization/csm-config-params
      - name: opa
        image: <AUTHORIZATION_OPA_IMAGE>
        imagePullPolicy: IfNotPresent
        args:
        - "run"
        - "--ignore=."
        - "--server"
        - "--log-level=debug"
        ports:
        - name: http
          containerPort: 8181
      - name: kube-mgmt
        image: <AUTHORIZATION_OPA_KUBEMGMT_IMAGE>
        imagePullPolicy: IfNotPresent
        args:
        - "--policies=<NAMESPACE>"
        - "--enable-data"
      volumes:
      - name: config-volume
        secret:
          secretName: karavi-config-secret
      - name: storage-volume
        secret:
          secretName: karavi-storage-secret
      - name: csm-config-params
        configMap:
          name: csm-config-params
---
apiVersion: v1
kind: Service
metadata:
  name: proxy-server
  namespace: <NAMESPACE>
spec:
  selector:
    app: proxy-server
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080
---
# Tenant Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-service
  namespace: <NAMESPACE>
  labels:
    app: tenant-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tenant-service
  template:
    metadata:
      labels:
        csm: <NAME>
        app: tenant-service
    spec:
      containers:
      - name: tenant-service
        image: <AUTHORIZATION_TENANT_SERVICE_IMAGE>
        imagePullPolicy: Always
        env:
          - name: SENTINELS
            value: <AUTHORIZATION_REDIS_SENTINEL_VALUES>
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis-csm-secret
                key: password
        args:
          - "--redis-sentinel=$(SENTINELS)"
          - "--redis-password=$(REDIS_PASSWORD)"
        ports:
        - containerPort: 50051
          name: grpc
        volumeMounts:
        - name: config-volume
          mountPath: /etc/karavi-authorization/config
        - name: csm-config-params
          mountPath: /etc/karavi-authorization/csm-config-params
      volumes:
      - name: config-volume
        secret:
          secretName: karavi-config-secret
      - name: csm-config-params
        configMap:
          name: csm-config-params
---
apiVersion: v1
kind: Service
metadata:
  name: tenant-service
  namespace: <NAMESPACE>
spec:
  selector:
    app: tenant-service
  ports:
  - port: 50051
    targetPort: 50051
    name: grpc
---
# Role Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: role-service
  namespace: <NAMESPACE>
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: role-service
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: role-service
subjects:
  - kind: ServiceAccount
    name: role-service
    namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: role-service
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: role-service
  namespace: <NAMESPACE>
  labels:
    app: role-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: role-service
  template:
    metadata:
      labels:
        csm: <NAME>
        app: role-service
    spec:
      serviceAccountName: role-service
      containers:
      - name: role-service
        image: <AUTHORIZATION_ROLE_SERVICE_IMAGE>
        imagePullPolicy: Always
        ports:
        - containerPort: 50051
          name: grpc
        env:
          - name: NAMESPACE
            value: <NAMESPACE>
        volumeMounts:
        - name: csm-config-params
          mountPath: /etc/karavi-authorization/csm-config-params
      volumes:
      - name: csm-config-params
        configMap:
          name: csm-config-params
---
apiVersion: v1
kind: Service
metadata:
  name: role-service
  namespace: <NAMESPACE>
spec:
  selector:
    app: role-service
  ports:
  - port: 50051
    targetPort: 50051
    name: grpc
---
# Storage service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: storage-service
  namespace: <NAMESPACE>
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: storage-service
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "patch", "post"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: storage-service
subjects:
  - kind: ServiceAccount
    name: storage-service
    namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: storage-service
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: storage-service-tokenreview-binding
  namespace: <NAMESPACE>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: storage-service
    namespace: <NAMESPACE>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storage-service
  namespace: <NAMESPACE>
  labels:
    app: storage-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: storage-service
  template:
    metadata:
      labels:
        csm: <NAME>
        app: storage-service
    spec:
      serviceAccountName: storage-service
      containers:
      - name: storage-service
        image: <AUTHORIZATION_STORAGE_SERVICE_IMAGE>
        imagePullPolicy: Always
        args:
          - "--vault-address=<AUTHORIZATION_VAULT_ADDRESS>"
          - "--vault-kv-engine-path=<AUTHORIZATION_KV_ENGINE_PATH>"
          - "--vault-skip-certificate-validation=<AUTHORIZATION_SKIP_CERTIFICATE_VALIDATION>"
          - "--vault-role=<AUTHORIZATION_VAULT_ROLE>"
        ports:
        - containerPort: 50051
          name: grpc
        env:
          - name: NAMESPACE
            value: <NAMESPACE>
        volumeMounts:
        - name: config-volume
          mountPath: /etc/karavi-authorization/config
        - name: csm-config-params
          mountPath: /etc/karavi-authorization/csm-config-params
        - name: vault-client-certificate
          mountPath: /etc/vault
      volumes:
      - name: config-volume
        secret:
          secretName: karavi-config-secret
      - name: csm-config-params
        configMap:
          name: csm-config-params
      - name: vault-client-certificate
        projected:
          sources:
            - secret:
                name: storage-service-selfsigned-tls
---
apiVersion: v1
kind: Service
metadata:
  name: storage-service
  namespace: <NAMESPACE>
spec:
  selector:
    app: storage-service
  ports:
  - port: 50051
    targetPort: 50051
    name: grpc
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: storage-service-selfsigned
  namespace: <NAMESPACE>
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: storage-service-selfsigned
  namespace: <NAMESPACE>
spec:
  secretName: storage-service-selfsigned-tls
  duration: 2160h # 90d
  renewBefore: 360h # 15d
  subject:
    organizations:
      - dellemc
  isCA: false
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - client auth
  dnsNames:
    - csm-authorization-storage-service
  issuerRef:
    name: storage-service-selfsigned
    kind: Issuer
    group: cert-manager.io
---
# Controller
apiVersion: v1
kind: ServiceAccount
metadata:
  name: controller
  namespace: <NAMESPACE>
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: controller
rules:
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["csmroles"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["csmroles/status"]
    verbs: ["get", "update", "patch"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["csmroles/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["csmtenants"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["csmtenants/status"]
    verbs: ["get", "update", "patch"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["csmtenants/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["storages"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["storages/status"]
    verbs: ["get", "update", "patch"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["storages/finalizers"]
    verbs: ["update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: controller
subjects:
  - kind: ServiceAccount
    name: controller
    namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  namespace: <NAMESPACE>
  labels:
    app: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: controller
  template:
    metadata:
      labels:
        csm: <NAME>
        app: controller
    spec:
      serviceAccountName: controller
      containers:
      - name: controller
        image: <AUTHORIZATION_CONTROLLER_IMAGE>
        imagePullPolicy: Always
        args:
          - "--authorization-namespace=<NAMESPACE>"
          - "--metrics-bind-address=127.0.0.1:8080"
          - "--health-probe-bind-address=:8081"
          - "--leader-elect=false"
          - "--tenant-service-address=tenant-service.<NAMESPACE>.svc.cluster.local:50051"
          - "--storage-service-address=storage-service.<NAMESPACE>.svc.cluster.local:50051"
          - "--role-service-address=role-service.<NAMESPACE>.svc.cluster.local:50051"
        env:
          - name: NAMESPACE
            value: <NAMESPACE>
        ports:
        - containerPort: 5052
          name: http
---
apiVersion: v1
kind: Service
metadata:
  name: controller
  namespace: <NAMESPACE>
spec:
  selector:
    app: controller
  ports:
  - port: 5052
    targetPort: 5052
    name: http
---
# Redis
apiVersion: v1
kind: Service
metadata:
  name: <AUTHORIZATION_REDIS_NAME>
  namespace: <NAMESPACE>
spec:
  type:
  clusterIP: None
  selector:
    app: <AUTHORIZATION_REDIS_NAME>
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
    name: <AUTHORIZATION_REDIS_NAME>
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: <AUTHORIZATION_REDIS_NAME>
  namespace: <NAMESPACE>
spec:
  serviceName: <AUTHORIZATION_REDIS_NAME>
  replicas: <AUTHORIZATION_REDIS_REPLICAS>
  selector:
    matchLabels:
      app: <AUTHORIZATION_REDIS_NAME>
  template:
    metadata:
      labels:
        csm: <NAME>
        app: <AUTHORIZATION_REDIS_NAME>
    spec:
      initContainers:
      - name: config
        image: <AUTHORIZATION_REDIS_IMAGE>
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis-csm-secret
                key: password

        command: [ "sh", "-c" ]
        args:
          - |
            cp /csm-auth-redis-cm/redis.conf /etc/redis/redis.conf
            
            echo "masterauth $REDIS_PASSWORD" >> /etc/redis/redis.conf
            echo "requirepass $REDIS_PASSWORD" >> /etc/redis/redis.conf
            
            echo "Finding master..."
            MASTER_FDQN=`hostname  -f | sed -e 's/redis-csm-[0-9]\./redis-csm-0./'`
            echo "Master at " $MASTER_FQDN
            if [ "$(redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
              echo "No sentinel found."
            
              if [ "$(hostname)" = "redis-csm-0" ]; then
                echo "This is redis master, not updating config..."
              else
                echo "This is redis slave, updating redis.conf..."               
                echo "replicaof $MASTER_FDQN 6379" >> /etc/redis/redis.conf                
              fi
            else
              echo "Sentinel found, finding master"
              MASTER="$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster | grep -E '(^redis-csm-\d{1,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')"              
              echo "replicaof $MASTER_FDQN 6379" >> /etc/redis/redis.conf 
            fi
        volumeMounts:
        - name: redis-primary-volume
          mountPath: /data
        - name: configmap
          mountPath: /csm-auth-redis-cm/
        - name: config
          mountPath: /etc/redis/
      containers:
      - name: <AUTHORIZATION_REDIS_NAME>
        image: <AUTHORIZATION_REDIS_IMAGE>
        command: [ "redis-server" ]
        args: [ "/etc/redis/redis.conf" ]
        ports:
        - containerPort: 6379
          name: <AUTHORIZATION_REDIS_NAME>
        volumeMounts:
        - name: redis-primary-volume
          mountPath: /data
        - name: configmap
          mountPath: /csm-auth-redis-cm/
        - name: config
          mountPath: /etc/redis/
      volumes:
      - name: redis-primary-volume
        emptyDir: {}
      - name: config
        emptyDir: {}
      - name: configmap
        configMap:
          name: redis-csm-cm
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: <AUTHORIZATION_REDIS_COMMANDER>
  namespace: <NAMESPACE>
spec:
  replicas: 1
  selector:
    matchLabels:
      app: <AUTHORIZATION_REDIS_COMMANDER>
  template:
    metadata:
      labels:
        csm: <NAME>
        app: <AUTHORIZATION_REDIS_COMMANDER>
        tier: backend
    spec:
      containers:
      - name: <AUTHORIZATION_REDIS_COMMANDER>
        image: <AUTHORIZATION_REDIS_COMMANDER_IMAGE>
        imagePullPolicy: IfNotPresent
        env:
        - name: SENTINELS
          value: <AUTHORIZATION_REDIS_SENTINEL_VALUES>
        - name: K8S_SIGTERM
          value: "1"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-csm-secret
              key: password
        - name: SENTINEL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-csm-secret
              key: password
        ports:
        - name: <AUTHORIZATION_REDIS_COMMANDER>
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /favicon.png
            port: 8081
          initialDelaySeconds: 10
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "500m"
            memory: "512M"
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: <AUTHORIZATION_REDIS_COMMANDER>
  namespace: <NAMESPACE>
spec:
  selector:
    app: <AUTHORIZATION_REDIS_COMMANDER>
  ports:
  - protocol: TCP
    port: 8081
    targetPort: 8081
---
# Sentinel
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: <AUTHORIZATION_REDIS_SENTINEL>
  namespace: <NAMESPACE>
spec:
  serviceName: <AUTHORIZATION_REDIS_SENTINEL>
  replicas: <AUTHORIZATION_REDIS_REPLICAS>
  selector:
    matchLabels:
      app: <AUTHORIZATION_REDIS_SENTINEL>
  template:
    metadata:
      labels:
        csm: <NAME>
        app: <AUTHORIZATION_REDIS_SENTINEL>
    spec:
      initContainers:
      - name: config
        image: <AUTHORIZATION_REDIS_IMAGE>
        command: [ "sh", "-c" ]
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis-csm-secret
                key: password
        args:
          - |
            replicas=$( expr $((<AUTHORIZATION_REDIS_REPLICAS>)) - 1)
            for i in $(seq 0 $replicas)
            do               
                node=$( echo "<AUTHORIZATION_REDIS_NAME>-$i.<AUTHORIZATION_REDIS_NAME>" )
                nodes=$( echo "$nodes*$node" )
            done            
            loop=$(echo $nodes | sed -e "s/"*"/\n/g")
            
            for i in $loop
            do
                echo "Finding master at $i"
                ROLE=$(redis-cli --no-auth-warning --raw -h $i -a $REDIS_PASSWORD info replication | awk '{print $1}' | grep role | cut -d ":" -f2)
                if [ "$ROLE" = "master" ]; then
                    MASTER=$i.authorization.svc.cluster.local
                    echo "Master found at $MASTER..."
                    break
                else
                  MASTER=$(redis-cli --no-auth-warning --raw -h $i -a $REDIS_PASSWORD info replication | awk '{print $1}' | grep master_host: | cut -d ":" -f2)
                  if [ "$MASTER" = "" ]; then
                      echo "Master not found..."
                      echo "Sleeping 5 seconds for pods to come up..."
                      sleep 5
                      MASTER=
                  else
                      echo "Master found at $MASTER..."
                      break
                  fi
                fi
            done
            
            echo "sentinel monitor mymaster $MASTER 6379 2" >> /tmp/master
            echo "port 5000
            sentinel resolve-hostnames yes
            sentinel announce-hostnames yes
            $(cat /tmp/master)
            sentinel down-after-milliseconds mymaster 5000
            sentinel failover-timeout mymaster 60000
            sentinel parallel-syncs mymaster 2
            sentinel auth-pass mymaster $REDIS_PASSWORD
            " > /etc/redis/sentinel.conf
            cat /etc/redis/sentinel.conf
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
      containers:
      - name: <AUTHORIZATION_REDIS_SENTINEL>
        image: <AUTHORIZATION_REDIS_IMAGE>
        command: ["redis-sentinel"]
        args: ["/etc/redis/sentinel.conf"]
        ports:
        - containerPort: 5000
          name: <AUTHORIZATION_REDIS_SENTINEL>
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: data
          mountPath: /data
      volumes:
      - name: redis-config
        emptyDir: {}
      - name: data
        emptyDir : {}
---
apiVersion: v1
kind: Service
metadata:
  name: <AUTHORIZATION_REDIS_SENTINEL>
  namespace: <NAMESPACE>
spec:
  clusterIP: None
  ports:
  - port: 5000
    targetPort: 5000
    name: <AUTHORIZATION_REDIS_SENTINEL>
  selector:
    app: <AUTHORIZATION_REDIS_SENTINEL>
---
apiVersion: v1
kind: Service
metadata:
  name: <AUTHORIZATION_REDIS_SENTINEL>-svc
  namespace: <NAMESPACE>
spec:
  type: NodePort
  ports:
  - port: 5000
    targetPort: 5000
    nodePort: 32003
    name: <AUTHORIZATION_REDIS_SENTINEL>-svc
  selector:
    app: <AUTHORIZATION_REDIS_SENTINEL>
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: auth-resource-reader
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps", "pods"]
    verbs: ["get", "watch", "list", "patch", "create", "update", "delete"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    resourceNames: ["ingress-controller-leader"]
    verbs: ["get", "update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:serviceaccounts:<NAMESPACE>
subjects:
  - kind: Group
    name: system:serviceaccounts:<NAMESPACE>
    namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: auth-resource-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: view
---
# Grant OPA/kube-mgmt read-only access to resources. This lets kube-mgmt
# list configmaps to be loaded into OPA as policies.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opa-viewer
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:<NAMESPACE>
  apiGroup: rbac.authorization.k8s.io
---
# Define role for OPA/kube-mgmt to update configmaps with policy status.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: <NAMESPACE>
  name: configmap-modifier
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["update", "patch"]
---
# Grant OPA/kube-mgmt role defined above.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: <NAMESPACE>
  name: opa-configmap-modifier
roleRef:
  kind: Role
  name: configmap-modifier
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:<NAMESPACE>
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy-server
  namespace: <NAMESPACE>
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: proxy-server
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["watch"]
  - apiGroups: ["csm-authorization.storage.dell.com"]
    resources: ["storages", "csmtenants"]
    verbs: ["get", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: proxy-server
subjects:
  - kind: ServiceAccount
    name: proxy-server
    namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: proxy-server
  apiGroup: rbac.authorization.k8s.io
