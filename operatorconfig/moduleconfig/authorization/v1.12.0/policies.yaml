apiVersion: v1
kind: ConfigMap
metadata:
  name: common
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  common.rego: |
    package karavi.common
    default roles = {}
    roles = {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volumes-create
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-create.rego: |
    package karavi.volumes.create

    import data.karavi.common
    default allow = false

    allow {
      count(permitted_roles) != 0
      count(deny) == 0
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no configured roles", [])
    }

    deny[msg] {
      count(permitted_roles) == 0
      msg := sprintf("no roles in [%s] allow the %s Kb request on %s/%s/%s",
              [input.claims.roles,
              input.request.volumeSizeInKb,
              input.systemtype,
              input.storagesystemid,
              input.storagepool])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool] >= to_number(input.request.volumeSizeInKb)
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool] == 0
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volumes-delete
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-delete.rego: |
    package karavi.volumes.delete

    import data.karavi.common

    default response = {
      "allowed": true
    }
    response = {
      "allowed": false,
      "status": {
      "reason": reason,
      },
    } {
      reason = concat(", ", deny)
      reason != ""
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no role data found", [])
    }

    default claims = {}
    claims = input.claims
    deny[msg] {
      claims == {}
      msg := sprintf("missing claims", [])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volumes-map
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-map.rego: |
    package karavi.volumes.map

    import data.karavi.common

    default response = {
      "allowed": true
    }
    response = {
        "allowed": false,
        "status": {
            "reason": reason,
        },
    } {
        reason = concat(", ", deny)
        reason != ""
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no role data found", [])
    }

    default claims = {}
    claims = input.claims
    deny[msg] {
      claims == {}
      msg := sprintf("missing claims", [])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: powermax-volumes-create
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-powermax-create.rego: |
    package karavi.volumes.powermax.create

    import data.karavi.common

    default allow = false

    allow {
      count(permitted_roles) != 0
      count(deny) == 0
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no configured roles", [])
    }

    deny[msg] {
      count(permitted_roles) == 0
      msg := sprintf("no roles in [%s] allow the %v Kb request on %s/%s/%s",
              [input.claims.roles,
              input.request.volumeSizeInKb,
              input.systemtype,
              input.storagesystemid,
              input.storagepool])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool] >= to_number(input.request.volumeSizeInKb)
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool] == 0
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volumes-unmap
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-unmap.rego: |
    package karavi.volumes.unmap

    import data.karavi.common

    default response = {
      "allowed": true
    }
    response = {
        "allowed": false,
        "status": {
            "reason": reason,
        },
    } {
        reason = concat(", ", deny)
        reason != ""
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no role data found", [])
    }

    default claims = {}
    claims = input.claims
    deny[msg] {
      claims == {}
      msg := sprintf("missing claims", [])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sdc-approve
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  sdc-approve.rego: |-
    package karavi.sdc.approve

    import data.karavi.common

    # Allow requests by default.
    default allow = true

    default response = {
      "allowed": true
    }
    response = {
       "allowed": false,
       "status": {
          "reason": reason,
       },
    } {
        reason = concat(", ", deny)
        reason != ""
    }

    default claims = {}
    claims = input.claims
    deny[msg] {
      claims == {}
      msg := sprintf("missing claims", [])
    }
