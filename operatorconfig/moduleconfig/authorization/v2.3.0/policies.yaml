# Copyright Â© 2020-2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#      http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: common
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  common.rego: |
    package karavi.common
    default roles = {}
    roles = {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volumes-create
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-create.rego: |
    package karavi.volumes.create

    import data.karavi.common
    default allow = false

    allow {
      count(permitted_roles) != 0
      count(deny) == 0
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no configured roles", [])
    }

    deny[msg] {
      count(permitted_roles) == 0
      msg := sprintf("no roles in [%s] allow the %s Kb request on %s/%s/%s",
              [input.claims.roles,
              input.request.volumeSizeInKb,
              input.systemtype,
              input.storagesystemid,
              input.storagepool])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool] >= to_number(input.request.volumeSizeInKb)
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool] == 0
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volumes-delete
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-delete.rego: |
    package karavi.volumes.delete

    import data.karavi.common

    default response = {
      "allowed": true
    }
    response = {
      "allowed": false,
      "status": {
      "reason": reason,
      },
    } {
      reason = concat(", ", deny)
      reason != ""
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no role data found", [])
    }

    default claims = {}
    claims = input.claims
    deny[msg] {
      claims == {}
      msg := sprintf("missing claims", [])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volumes-map
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-map.rego: |
    package karavi.volumes.map

    import data.karavi.common

    default response = {
      "allowed": true
    }
    response = {
        "allowed": false,
        "status": {
            "reason": reason,
        },
    } {
        reason = concat(", ", deny)
        reason != ""
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no role data found", [])
    }

    default claims = {}
    claims = input.claims
    deny[msg] {
      claims == {}
      msg := sprintf("missing claims", [])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: powermax-volumes-create
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-powermax-create.rego: |
    package karavi.volumes.powermax.create

    import data.karavi.common

    default allow = false

    allow {
      count(permitted_roles) != 0
      count(deny) == 0
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no configured roles", [])
    }

    deny[msg] {
      count(permitted_roles) == 0
      msg := sprintf("no roles in [%s] allow the %v Kb request on %s/%s/%s",
              [input.claims.roles,
              input.request.volumeSizeInKb,
              input.systemtype,
              input.storagesystemid,
              input.storagepool])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool] >= to_number(input.request.volumeSizeInKb)
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool] == 0
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagepool])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volumes-unmap
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-unmap.rego: |
    package karavi.volumes.unmap

    import data.karavi.common

    default response = {
      "allowed": true
    }
    response = {
        "allowed": false,
        "status": {
            "reason": reason,
        },
    } {
        reason = concat(", ", deny)
        reason != ""
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no role data found", [])
    }

    default claims = {}
    claims = input.claims
    deny[msg] {
      claims == {}
      msg := sprintf("missing claims", [])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sdc-approve
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  sdc-approve.rego: |
    package karavi.sdc.approve

    import data.karavi.common

    # Allow requests by default.
    default allow = true

    default response = {
      "allowed": true
    }
    response = {
       "allowed": false,
       "status": {
          "reason": reason,
       },
    } {
        reason = concat(", ", deny)
        reason != ""
    }

    default claims = {}
    claims = input.claims
    deny[msg] {
      claims == {}
      msg := sprintf("missing claims", [])
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-csm-cm
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  redis.conf: |
    bind 0.0.0.0
    protected-mode no
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    daemonize no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    always-show-logo no
    set-proc-title yes
    proc-title-template "{title} {listen-addr} {server-mode}"
    save 900 1 300 10 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    rdb-del-sync-files no
    dir /data
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync yes
    repl-diskless-sync-delay 5
    repl-diskless-sync-max-replicas 0
    repl-diskless-load disabled
    repl-disable-tcp-nodelay no
    replica-priority 100
    acllog-max-len 128
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    lazyfree-lazy-user-del no
    lazyfree-lazy-user-flush no
    oom-score-adj no
    oom-score-adj-values 0 200 800
    disable-thp yes
    appendonly yes
    appendfilename "appendonly.aof"
    appenddirname "appendonlydir"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    aof-timestamp-enabled no
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    latency-monitor-threshold 0
    notify-keyspace-events ""
    hash-max-listpack-entries 512
    hash-max-listpack-value 64
    list-max-listpack-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-listpack-entries 128
    zset-max-listpack-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    dynamic-hz yes
    aof-rewrite-incremental-fsync yes
    rdb-save-incremental-fsync yes
    jemalloc-bg-thread yes
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: snapshot-create
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  snapshot-create.rego: |-
    package karavi.snapshot.create

    import data.karavi.common

    default allow := false

    allow {
      count(permitted_roles) == count(input.request)
      count(deny) == 0
    }

    # Deny if there are no roles found.
    deny[msg] {
      common.roles == {}
      msg := sprintf("no configured roles", [])
    }

    # Deny if claimed roles has no match for the request.
    deny[msg] {
      count(permitted_roles) != count(input.request)

      unpermitted_requests := [req |
        element := input.request[_]

        not permitted_roles[element.name]

        req := element
      ]

      msg := sprintf(
        "no roles in [%s] allow the %s Kb request on %s/%s/%s for %s",
        [
          input.claims.roles,
          unpermitted_requests[_].volumeSizeInKb,
          input.systemtype,
          input.storagesystemid,
          unpermitted_requests[_].storagepool,
          unpermitted_requests[_].name,
        ],
      )
    }

    # No OR in OPA, multiple rules are needed.
    size_is_valid(a, b) {
      to_number(a) >= to_number(b)
    }

    # No OR in OPA, multiple rules are needed.
    size_is_valid(a, _) {
      to_number(a) == 0
    }

    # Create a list of permitted roles.
    permitted_roles[snapshot] := roles {
      # Split the claimed roles by comma into an array.
      claimed_roles := split(input.claims.roles, ",")

      # Iterate through the requests.
      req := input.request[_]

      roles := [role |
        sp := req.storagepool
        size := req.volumeSizeInKb

        # Iterate through the roles in the request.
        c_role := claimed_roles[_]
        common.roles[c_role]

        system_ids := common.roles[c_role].system_types[input.systemtype].system_ids[input.storagesystemid]
        pool_quota := system_ids.pool_quotas[sp]

        # Validate that the pool quota is valid.
        size_is_valid(pool_quota, size)

        role := {"size": to_number(pool_quota), "storagepool": sp, "role": c_role}
      ]

      # Ensure that the role list is not empty.
      count(roles) != 0

      # Set the snapshot name which creates an entry in the list.
      snapshot := req.name
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: powerstore-volumes-create
  namespace: <NAMESPACE>
  labels:
    openpolicyagent.org/policy: rego
data:
  volumes-powerstore-create.rego: |
    package karavi.volumes.powerstore.create

    import data.karavi.common

    default allow = false

    allow {
      count(permitted_roles) != 0
      count(deny) == 0
    }

    deny[msg] {
      common.roles == {}
      msg := sprintf("no configured roles", [])
    }

    deny[msg] {
      count(permitted_roles) == 0
      msg := sprintf(
        "no roles in [%s] allow the %s Kb request on %s/%s/",
        [
          input.claims.roles,
          input.request.size,
          input.systemtype,
          input.storagesystemid,
        ],
      )
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]

      quota := common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagesystemid]
      quota >= to_number(input.request.size)

      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagesystemid])
    }

    permitted_roles[v] = y {
      claimed_roles := split(input.claims.roles, ",")

      some i
      a := claimed_roles[i]
      common.roles[a]

      v := claimed_roles[i]
      common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagesystemid] == 0
      y := to_number(common.roles[v].system_types[input.systemtype].system_ids[input.storagesystemid].pool_quotas[input.storagesystemid])
    }
